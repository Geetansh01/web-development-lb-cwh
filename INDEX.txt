/******************Week 1*************************/
    L18 : HTML Basics
          1)HTML, Tags, comments
          2)HTML Text Element
                1)Block Element
                2)Inline Element
          3)Heading Tag
          4)paragraph Tag
          5)DIV tag
          6)Empty tag/ Self closing tag (eg: <br/> tag)
          7)List in HTML
                1)Ordered List
                2)Unordered List
                3)Description List
          8)Attributes in html Tags
          9)meta tag

/**********************CWH Starts*****************************/
/********Tut 1**************/
      1)Basic OverView
      2)FrontEnd
            -HTML
            -CSS
            -JavaScript
      3)FrontEnd FrameWorks to deploy JavaScript Quickly and Efficiently
            -React
            -NextJS
            -Angular
      3)BackEnd
            -django
            -flask
            -Node.js
            -php
            -ruby on rails

/********Tut 3**************/
      How to view websites on your phone

/********Tut 5**************/
      1)Image Tag
            1)For the attribute of height & width, always set either 1 of them and the other will automatically adjust. 
            These will be later finetuned by css but setting 1 of them in html helps in reducing CLS (so better SEO).
            2)Values of width & height Attributes are in pixels 
      2)Table tag

/********Tut 6**************/
      1) 3 SEO Web Vitals
            -CLS (Cumulative layout Shift) 
            -LCD (Largest Contentful Paint) 
            -FID (First Input Delay)
            ref : https://web.dev/articles/vitals
            1)LightHouse Report

/********Tut 7**************/
      2)form tag

/********Tut 8**************/
      1)Inline and block Elements

/********Tut 9**************/
      1)Id & Class attributes 

/********Tut 10**************/
      2)audio, video, svg, iframe tags

/********Tut 11**************/
      Semantic tags

/********Tut 13**************/
      Exercise

/********Tut 13**************/
      1)HTML Entities
            &nbsp;
            &copy; etc..
      2)pre tag
      3)code tag

/********Tut 14**************/
      CSS starts
      1)style tag
      2)selectors

/********Tut 15**************/
      3 ways to add css to your HTML :
      1)Inline CSS
            -using style attribute
      2)Internal
      3)External

/********Tut 17**************/
      Selectors in CSS:
      1)Element Selector
      2)Class selector
      3)ID selector
      4)Child Selector
      5)Descendant Selector
      6)Universal Selector
      7)Pseudo Selector (pseudo class in CSS)
      8)attribute selector (Srch online)
      9)Pseudo-element selector (see Tut35)

/********Tut 18**************/
      CSS Box Model:
      1)Element, Padding, border, margin
      Tip: 1)Always set "box-sizing" to "border-box" to lay out elements. 
      This makes dealing with the sizes of elements much easier
      2)Margin collapse only happens to block elements

/********Tut 19**************/
      1)Fonts in CSS
            1)font-family - fallback fonts {Recommended to include a generic Font Family like "Times New Roman" Family}
            2)font-style, font-weight, font-size etc...
      2)Different text properties :
            1)text-decoration, text-transform, text-decoration-color etc.
            2)overflow, text-overflow, word-break etc.
            3)text-align etc.
      3)Google Fonts (https://fonts.google.com/)
      4)Colors in CSS
            Ways to represent colors in css
                  -color keywords
                  -HEX color codes
                  -RGB 
                  -RGBA
                  -HSL

/********Tut 20**************/
      Exercise

/********Tut 21**************/
      1)CSS Specificity and Cascade
            1)Cascade Algorithm : 
                  The cascade algorithm has 4 distinct stages : 
                  1)Position and order of appearance : for use when same types of selectors in conflict
                  2)Specificity: for use when different types of selectors in conflict
                        Order of specificity is:
                        Inline Style > ID Selector > Class or Attribute Selector > Element Selector > Universal Selector

                        Tip : 
                        1)Use the least specific selectors more often to style your HTML. That way you can easily override specific styles when needed with more specific selectors. 
                        2)As a consequence of Tip 1), you should use !important v.very sparingly in your code (as it would make debugging difficult)
                        3)To calculate specificity, assign a value to each part of the selector:

                              -Universal Selector: 0
                              -Element selectors and pseudo-elements: 1
                              -Class selectors, attribute selectors, and pseudo-classes: 10
                              -ID selectors: 100
                              -Inline styles: 1000
                              -!important : 10,000
                        Then, add up the values of all the parts in the selector.

                  3)Origin
                  4)Importance: some CSS rules are weighted more heavily than others, especially with the " !important " rule type

/********Tut 22**************/
      1)Measurement Units in CSS
            1)px 
            2)vw, vh
            3)em
            4)rem (root element : html)
            5)vmin, vmax
            6)% units (width: 50%; means 50% the width of parent element)
      2)min-height, min-width, max-height, max-width

/********Tut 23**************/
      CSS Display Properties:
      1)U can set "display: " style as:
            1)inline (To make block elements inline)
            2)inline-block

                  Tip : 1)Inline elements don't respect Top padding and Top margin. Use "inline-block" for that.
                  2)Inline elements don't respect width. Use "inline-block" for that.

            3)none
            4)flex (More details in flex-box Tutorial)
            5)grid
      2)visibility

/********Tut 24**************/
      1)Box Shadow syntax: " box-shadow: h-offset v-offset blur spread color inset; "
      2)Text Shadow syntax: " text-shadow: h-offset v-offset blur color; "
      3)outline, outline-offset
      4)border-radius

/********Tut 25**************/
      1)list styling using CSS
            Tip : 1)" list-style: " can make a ul list look like ol
                  2)A li will have the following display property
                        " display: list-item; "
                  This gives the li a "marker" and "text"
            
            1)list-style, list-style-position, list-style-type, list-style-image 
              (There was also a shorthand syntax!)
      2)Basic nav bar (Navigation bar)
      
/********Tut 26**************/
      1)More on CSS overflow
      2)overflow-x, overflow-y etc.
      3)white-space: nowrap;

/********Tut 29**************/
      Exercise

/********Tut 28**************/
      Position in CSS
      1)position : relative, absolute, static
      2)position : absolute; 
        Tip: 1)Element will find it's nearest positioned parent (means any position except static position) and sit relative to it (in worst case, it sits relative to <html> element)
             2)WARNING : transform, filter, or perspective properties can also make an element appear as positioned 
      3)position : fixed (Used for Annoying ADs)
      3)position : sticky (Used for Nav Bar)

/**********Tut30************/
      Variables in CSS
      1):root{
            --color : rgb(195, 2, 195);
            --seccolor : rgb(179, 107, 179);
            etc...
        }
      Tip : Use this to quicly change the theme of website by setting GLOBAL variables (Say for primary and secondary colors)

/**********Tut31************/
      Media Queries in CSS
      1)Syntax : 
            @media not|only mediatype and (expressions) {
                  CSS-Code;
            }
      2)Most Common usage: 
            @media only screen and (max-width : 400px) {
                  CSS-Code;
            }       

/**********Tut34************/
      Exercise

/**********Tut34************/
      Float & Clear in CSS
      1)Flex-box has mostly reduced the usage of these styles today.
      2)float: right; (use "display: flow-root;" with container of floating element to account for overflow of floating element)
      3)clear: right/left/both

      Tip: Don't use float and clear 😂

/**********Tut35************/
      More on CSS Selectors
      1)pseudo-element Selector ( p::first-line{...}, ::selection, input::placeholder )
      2)One more way to use universal selector ( .boxes *{...} )
      3)Grouping Selectors("," separated)
      4).box:nth-child(odd), .box:nth-last-child(1) etc.
      5)Inserting pseudo-elements dynamically using CSS
            1)	.boxes::before{
				content: "Befooooooooooooooooooooooooore";
				background-color: blanchedalmond;
			}

                  This will insert pseudo-element before the main content of ".boxes"
            2).boxes::after{...}
      6).box::selection
      7)input tag

/**********Tut37************/
      Exercise

/**********Tut38************/
      CSS Flex Box
      1)Container Properties (Applied on the parent container containing the items) :
            1)To align elements in the centre, set the following styles to the " parent container "
                  display: flex;
                  justify-content: center;
                  align-items: center;
            
            Tip: Most of the times u will use Flex box to align in centre 😉

            2)Other options:
                  justify-content: flex-end, flex-start, space-between, space-around etc.
                  align-items: flex-start, flex-end,  etc.
            3)flex-direction: row, column, row-reverse, column-reverse 
            4)Axes in Flex box(can change depending on " flex-direction "):
                  1)Main Axis : Axis along which items are layed 
                  2)Cross Axis : Axis perpendicular to direction in which items are layed
            
            " justify-content " works along the main axis.
            5)Terminologies: Main start, Main end, Cross start, Cross end, Main size, Cross size
            6)flex-wrap: wrap;
            7)align-content: center; ( When content is wrapping in multiple lines(i.e "flex-direction is row" AND "flex-wrap is wrap" ) and needs to be centered along the Cross Axis).
            
                  Tip: There is NO " justify-items " in flex box 🙂
                  
            8)Shorthand to set "flex-direction" and "flex-wrap" :
                  flex-flow: <flex-direction> <flex-wrap>
                  eg. flex-flow: row wrap;
            9)gap, row-gap, col, column-gap
      
      2)Item Properties:
            1)order (jitna zyada order utna baad me element aega, default order is 0)
            2)flex-grow (Basically to fill the remaining space on the main axis)
            3)flex-shrink
            4)align-self

/**********Tut39************/
      CSS Grid
      1)Container Properties (Applied on the parent container containing the items) :
            1)grid-template-columns
                  Tip: 1)Insted of writing " grid-template-columns: 1fr 1fr 1fr ", write "grid-template-columns: repeat(3, 1fr); "
                  2)minmax(x, y) : a general function, multiple uses throughout CSS
            2)Terminologies : 
                  1)grid line, grid cell
                  2)grid track, grid area
                  3)grid-template-rows, grid-template-cloumns
            3)naming grid lines
            4)Two major ways to use grid:
                  1)Using grid rows and columns (and then placing items in the cells)
                  2)using grid areas
            5)fr (a unit, full form : fraction)
            6)gap, row-gap, column-gap
                  Tip: Don't use padding/ margin in flexbox or grid, use gap instead ✌
            7)justify-items (for horizontal), align-items (for vertical)
                  Tip: 1)shorthand: "place-items: center;" means "justify-items: center;" && "align-items: center;"😊 
            8)justify-content, align-content 
                  1)These are used to arrange the whole grid inside the grid container (rather than arranging the items inside the grid which is done by "justify-items", "align-items")
                  2)Useful when grid is smaller than the container containing the grid
                  4)shorthand: "place-content: center;" means "justify-content: center;" && "align-content: center;"    
                    similarly "place
      
      2)Item Properties:
            1)"grid-row-start: 1;"," grid-row-end: 2;", (Shorthand is " grid row: 1/2; ")
            2)grid-column-start, grid-column-end (shorthand is "grid column")
            3)align-self, justify-self (these apply to individual items in contrast to "align-items" and "justify-items" which apply to all the items in the grid)

/**********Tut41************/
      Exercise

/**********Tut42************/
      CSS Transforms
      1)transform: rotate(45deg) ( or rotate(0.25 turn) )
                                 ( or rotateX(45deg) similarly y and z axis)
      2)scale(1.2) (scaleX, similarly for y and z axis)
      3)skew(), skewX() (similarly skewY()) 
            Tip: NO skewZ() is there ❌
      4)translateX(100%) (100% means 100% of the width of the element on which translate is applied and NOT the width of parent!)
      5)Multiple transforms in one { transform: rotate(0.25turn) skewX(10deg) translateX(100%); }
      6)transform-origin

/**********Tut44************/
      Exercise

/**********Tut45************/
      CSS Transition property
      1)4 Different parts:
            transition-property: transform;
            transition-duration: 4s;
            transition-timing-function: ease-in-out;
            transition-delay: 1s;
      
      2)Shorthand to combine above 4
            transition: transform 4s ease-in-out 1s;

/**********Tut46************/
      CSS Animations
      1)Two synatxes to set keyframes of animation:
            1)
        @keyframes GeetanshKiAnimation{
            from{
                background-color: rgb(255, 0, 153);
            }
            to{
                background-color: blue;
                transform: translateX(1000px);
            }
        }

            2)
        @keyframes Animation2 {
            0%{
                transform: rotate(0deg);
            }
            20%{
                transform: rotate(90deg);
            }
            40%{
                transform: rotate(180deg);
            }
            60%{
                transform: rotate(270deg);
            }
            80%{
                transform: rotate(360deg);
            }
            100%{
                transform: rotate(0deg);
            }
        }

      2)There are many different properties for animation, like:
            animation-name: geetanshKiAnimation;
            animation-duration: 1s;
            animation-iteration-count: 2;
            animation-timing-function: ease-in-out;
            animation-delay: 1s;
            animation-direction: normal; (or alternate, reverse etc.)
            animation-play-state: paused; (We actually use JS to pause our Animations)
            animation-fill-mode: forwards; (used rarely 😁)


      3)Shorthand for above properties:
               animation: name duration timing-function delay iteration-count direction fill-mode;

      4)To apply multiple comma separated animation using shorthand:
                  animation: GeetanshKiAnimation 4s ease-in-out 1s infinite,
                             Animation2 4s ease-in-out 1s infinite;

/**********Tut48************/
      Exercise

/**********Tut49************/
      CSS Object fit and Object Cover
      1)object-fit: 
            -cover (Most Used)
            -contain (Most Used)
            -none
            -fill (default)
      2)object-position: 
            which part of image to show when unable to see full image:
                  -bottom left
                  -top right
                  -left etc.
                  -50% 50%
            
            Setting image's position whithin it's space
                  -10px 20px (right, top)

            Tip : use this with " object-fit: cover OR none" for desired effect 😊
      3)If you want to set image as a background (this also prevents noobs from being able to download the image 🤓)
            background: url( "Image URL Here" );
            background-position: top left; (top left means top left part of the image will be visible as background : useful when the entire image is too large)

            background-repeat: no-repeat; (or repeat-x, repeat-x)
            (when the image is small, it is repeated to fill the background, use this property to control that)

            background-clip: content-box; (OR border-box, padding-box)

/**********Tut 50************/
      CSS Filters
      
      You can apply these styles on different html elements:
      1)blur(10px)
      2)grayscale(10%)
      3)opacity(1) [0 to 1, 1 being fully visible]
       etc.
      4)combining multiple Filters
            filter: grayscale(10%) brightness(20%);

/**********Tut 52************/
      Figma Intro Basic

/**********Tut 53************/
      Netflix Clone (Exercise)

      New Things used:
      1)background-size: cover;
      2)changing color of svg (fill="red" inside the .svg file)

      Tip: 1)The favicon when stored in Tut53 (i.e the same directory where index.html is stored i.e the entry point of our website i.e the root directory of our website) is picked automatically by ALL other browsers (without any kind of linking being done via code) (when website is hosted using live server extension of VS-code) BUT NOT edge 😞
      (This might be corrected in future edge updates)

           2)For this to work, VS-code should be opened in Tut53, this means live server extension will treat TUT53 as the root directory of our website.
      
/**********Tut 54************/
      JavaScript Starts
      1)JS is a client side scripting language to make webpages interactive. 
      2)JS is a Dynamically typed language.
      2)U can use Node.js to script backend using JavaScript
      3)Ways to add JS to your html:
            1)inline (using <style> tag)
            2)external 
      2)Some JS functions
            1)alert()
            2)console.log("...") -->useful for debugging
            3)prompt("Enter Ur Name : ")
      
      About Node.js
      1)This is the run-time environment for JavaScript
            1)A nice SO answer on "What is run time environment?" (ref: https://stackoverflow.com/questions/3710130/what-is-run-time-environment):
                  Distinguish this from Development Environments and Build Environments.

                  You will tend to find a hierarchy here.

                  Run time environment - Everything you need to execute a program, but no tools to change it.

                  Build environment- Given some code written by someone, everything you need to compile it or otherwise prepare an executable that you put into a Run time environment. Build environments are pretty useless unless you can see tests what you have built, so they often include Run too. In Build you can't actually modify the code.

                  Development environment - Everything you need to write code, build it and test it. Code Editors and other such tools. Typically also includes Build and Run.
                  
      2)Node.js 's javascript engine is derived from chrome's V8 engine (a JavaScript engine )
            1)A JavaScript engine is simply a computer program that interprets JavaScript code. The engine is responsible for executing the code.
      3)Some functions (like alert() etc..) are available only in browsers and thus a JS code containing these would throw error when being run by Node.js
      
/**********Tut 55************/
      Variables in JavaScript
      1)Naming Rules for variables
            -Letters, digits, underscores, $ sign allwed
            -Must begin with $, _ or Letters
            -Case Senssitive (num & Num are different)
            -JS reserved words can not be used
      2)3 types of variables in JS :
            1)var
                  -It is globall scoped
                  
                  Tip: mostly we will not use a "var" in our code but use "let" & "const"
            2)let
                  -It is local scoped
                  -If you declare it outside of all blocks then it will be global
            3)const
                  -It is local scoped
      3)Primitive DataTypes in JS:
            -null : This data type can hold only one possible value that is null
                    "typeof" will give the datatype of a null variable as "object" (Historical Reasons)
            -number
            -boolean
            -string
            -symbol
            -undefined :  The meaning of undefined is ‘value is not assigned’
            -BigInt : This data type can represent numbers greater than 2^53-1 which helps to perform operations on large numbers. 
                      The number is specified by writing ‘n’ at the end of the value

      4)Non-Primitive DataTypes in JS
            1)Objects
                  -An object is a collection of properties.
                   And a property is a <key : value> pair
                  -A property's value can be a function, in which case the property is known as a method
                  -Example:

                        const obj = {
                              property1: <value1>, // property name may be an identifier
                              2: <value2>, // or a number
                              "property n": <value3>, // or a string
                        };
            
            Tip: ';' is optional in JS but it's a good idea to use it to mark end of statement

/**********Tut 56************/
      1)Selection Structure in JS (Conditionals like if-else etc..)
      2)Arithmetic operators in JS 
            1)=== : to compare value and type

                  console.log(3 == "3"); //gives true
                  console.log(3 === "3"); //gives false

            2)etc..
      3)REPL (Read Evaluate Print Loop of JS)

/**********Tut 57************/
      Loops in JS
      1)for Loop
      2)for in loop : to loop through the keys of an object

            let person = {
            name: "Geetansh",
            "Running Speed": 20,
            weight: 60,
            height: 181
            };

            // for in loop
            for (const key in person) {
                  if (Object.hasOwnProperty.call(person, key)) {
                        console.log(key, person[key]);
                  }    
            }

            1)Here, The "hasOwnProperty()" method of Object instances returns a boolean indicating whether this object has the specified property as its own property (as opposed to inheriting it).
            2)Removing this if() statement would result in all the properties of the object being printed.
             
      3)for of loop : to iterate an iterable data structure like arrays, strings
      4)while loop
      5)do while loop

/**********Tut 58************/
      JS functions
      1)Simpe function ex:
            function add(a, b, c = 1){
                  let sum = a + b + c;
                  console.log("Sum is : ", sum);
                  return sum;
            }

      2)arrow function in JS
            1)Used for shorter synatax over traditional functions
            2)Syntax:

                  const myFunction = (param1, param2, ...) => {
                        // function body
                  }

            In the code above, the "myFunction" is the variable that holds the function. You can call the function as "myFunction()" later in your code.

/**********Tut 59***********/
      Exercise: Faulty Calcualator
      Tip: CWH used eval() in his solution but Never use eval() in actual production (Security Reasons) 😨😨

/**********Tut 60***********/
      Strings in JS
      1)Template literals 
            1)Template Literals use back-ticks (``) rather than the quotes ("") to define a string
            2)With template literals, you can use both single and double quotes inside a string
            Ex:

                  // let sentence = "This lion's "nature" is carnivorous by "birth !";  //Unable to write a string that contains double or single quotes {" ", ' '} in the usual manner 

                  let sentence = `This lion's "nature" is carnivorous by "birth !`;  //Prblm solved with "Template literals" 
                  console.log(sentence);

            3)String Interpolation : Template literals provide an easy way to interpolate variables and expressions into strings
            Ex: 

                  let first_name = "Geetansh";
                  let last_name = "Bhardwaj";
                  console.log(`The name is ${first_name} ${last_name}`);
      2)various string functions and properties :
            - .toLowerCase()
              .slice(x,y)  {x index included , y not}
              .replace("<str-to-replace>", "<with-this-str>")
              .trim()
              etc...

                  Tip: Strings in JS are IMMUTABLE, so all of these function can NOT change the original string but you can always make a new one 😉

            - .length etc...

/**********Tut 62***********/
      Exercise : Business Name Generator 

/**********Tut 63***********/
      Arrays in JS
      1)Arrays in JS are MUTABLE 🙌
      2)Can hold a mix of different data types
      3)Arrays in JS are not primitive data types but "Array" Objects (So, they also have associated Properties and Functions)
      3)Array Properties:
            - .length
      4)Array Functions:
            - .toString(...)
              .join(...)
              .pop()
              .push()
              .shift() --->pop() ka bhai but from front
              .unshift() --->push() ka bhai but from front
              .sort()
              .forEach((element, index, array)=>{
                  //function body
              })
                  1)Example:
                        let numbers = [1, 2, 3, 4, 5, 6];
                        numbers.forEach((value, index, numbers) => {
                              console.log(value,index,numbers);
                        });

              etc...(Many more, do when required from net 😁)
      
      5)Imp array functions
            1).map(
                  //Arrow Function here
              )
                  1)The map() method of Array instances creates a new array populated with the results of calling a provided function on every element in the calling array.
                  2)Example:
                        let nums = [1, 2, 3, 4, 5, 6];
                        let SquareArray = [];
                        SquareArray = nums.map((element)=>{
                              return element**2;
                        });

            2).filter() : The filter() method of Array instances creates a shallow copy of a portion of a given array, filtered down to just the elements from the given array that pass the test implemented by the provided function.

            3).reduce() : The reduce() method of Array instances executes a user-supplied "reducer" callback function on each element of the array, in order, passing in the return value from the calculation on the preceding element. 
            The final result of running the reducer across all elements of the array is a single value.
            
            4)Array.from(...) : The Array.from() static method creates a new, shallow-copied Array instance from an iterable or array-like object.

/**********Tut 65***********/
      Exercise : Factorial 
             
/**********Tut 66***********/
      BOM & DOM in JS
      0)window object
            1)-It is a global object creted by the browser.
              -global means accessible everywhere.
                  eg: You can replace "console.log(...)" with "window.console.log(...)", it's same.
            2)this "window" object represents the browser window (basically everything) and used to control anything within the browser window.
            3)In this window object (i.e as the functions and properties of this window object) lies 3 major things:
                  1)DOM
                  2)BOM
                  3)JS Core 
                  
      1)DOM : Document Object Model
            1)DOM basically apke webpage ki HTML ko (i.e ENTIRE HTML Documnet ko) ek "Object" bna deta hai.
            2)Ye Object represents the HTML Document in a logical tree like structure jisse programming languages and scripting languages (like JS) us Document ke elements ko modify/ manipulate kr pae.
                  eg: Using JS to change the color of any element (in a webpage) comes under DOM.
            3)DOM pure webpage ko ek hierarchial tree like structure bna deta hai (see DOM.jpg)
      
      2)BOM : Browser Object Model
            1)It allows JS to communicate to browser regarding matters other than content of webpage (content of webpage is entirely under DOM)
                  eg: when we use "alert()" to ask the browser to display an alert to the user, this is something other than the content of the webpage & comes under BOM.

      Tip: 1)-In edge, go to : inspect element -> elements tab -> select an element
             -This selected element can now be represented by "$0" and you can interact with it using JS
                  eg: typing " $0.style.backgroundColor = "purple"; " in the console changes the background color of the selected element to purple! 💜💜

/**********Tut 67***********/
      JS DOM - Children, Parent & Sibling Nodes
      1)Walking the DOM : accessing the element (See accompanying index.html)
            1)document.body.childNodes : run this in the edge console to access all the child nodes of "body" 
                  output: NodeList(5) [text, div.container, text, script, text]   ____(1)

                  Tip: "text" in above output refers to any kind of "blank-space" or "newline character" appearing before "div.container". So this "blank-space" or "newline character" is also treated as a child node.

            2)document.body.childNodes[1] : to access the 1st child node ("div.container" acc. to (1) above)
            3)document.body.firstElementChild : To access the first child node that is an element
                  1)So "text" node is ignored and we get "div.container" (acc. to (1) above)
            4)document.body.childNodes[1].style.backgroundColor = "green" : changes the background Color of "div.container" to green (acc. to (1) above)

                  Tip: 1)Instead of repeatedly navigating to the target element, you can use a variable for convenience. So doing the same thing as above :

                        let a = document.body.childNodes[1];
                        a.style.backgroundColor = "green";

                        -Every node is an object so "document.body.childNodes[1]" i.e "div.container" is an object in DOM (typeof(a) gives 'object')
                        -So "a" can now be used to change the properties of "div.container" object

                       2)More Technically, in JS, primitive data-types are "passed by value" and everything else (i.e objects) are "passed by sharing".
                         To read more refer : 
                         1)https://stackoverflow.com/a/38533677/22639449 
                         2)http://dmitrysoshnikov.com/ecmascript/chapter-8-evaluation-strategy/#call-by-sharing (this link given in above SO answer, in case it's not accessible, I archived it as "Archive.pdf" in Tut67 Folder)
            5)<element-name>.parentElement : to get the parent element
            6)<element-name>.nextElementSibling , <element-name>.previousElementSibling etc...
            7)<element-name>.children : to get all those child nodes that are also HTML elements 
                  1)<element-name>.children includes only element nodes. To get all child nodes, including non-element nodes like text and comment nodes, use <element-name>.childNodes.
                  2)<element-name>.children[0] : to access 0th children (i.e 0th child node that is an HTML Element)

                  Tip: We will mostly be concerned with only those Nodes in DOM that are also HTML elements (so text nodes, comment Nodes will be ignored) 😉😉

/**********Tut 68***********/
      Continued - Walking the DOM
      JS - Selecting elements by Ids, Classes, etc. in DOM
            1)document.getElementsByClassName(" <class-name> ")
                  1)if say "box" is the class Name then:
                        document.getElementsByClassName("box")

            2)document.getElementById(" <id> ")
            3)document.querySelector(" <CSS-selector-here> ")
                  1)NOTE: It takes CSS Selector. So if there is a class "box" then ".box" will be used  🛑🛑
                        document.querySelector(".box") 
                  2)This will NOT ❌ target all elements that match with ".box" CSS Selector but just the 1st one matched. If u want to target all elements the see 4) 👇
            4)document.querySelectorAll(" <CSS-selector-here> ")
                  1)This returns a NodeList of all nodes (Here, these nodes would be HTML elements) that match ".box" Selector
                  2)Although NodeList is not an Array, it is possible to iterate over it with forEach()
            5)document.getElementsByTagName("div")

      Some other functions
      1)element.matches(" <CSS-selector-here> ")
      3)element.closest(" <CSS-selector-here> ")
      3)elementA.contains(elementB) : gives true if elementA contains elementB

/**********Tut 70***********/
      Exercise : Change Box color Randomly using DOM

      Tip: To generate a random number b/w "min" & "max":
                  min + r(max - min)
            r = random num b/w 0 & 1 { 0 <= r <= 1}

/**********Tut 71***********/
      Continued - Walking the DOM
      [See what all of these do in enclosed notes]
      1)element.innerHTML
            1)You can access inner HTML using this
            2)U can also change inner HTML using this, pass the new HTML as a string
                  element.innerHTML = `<div class="NEWbox">I am NEW-Box</div>`
      2)element.innerText
      3)element.outerHTML
      4)element.tagName
      5)element.nodeName
            This is for all nodes (text, comment node etc) but ".tagName" only for Element nodes (i.e HTML element Nodes) 
      6)element.textContent
      7)element.hidden
      8)element.hasAttribute(" <any Attribute, say id, class, etc> ")
      9)element.getAttribute(...)
      9)element.setAttribute(...)
      10)element.attributes : gives all attributes (class, id, etc...)
      11)element.removeAttribute("<attribute to be removed>")
            eg: element.removeAttribute("class")
      12)document.designMode = "on" : Now u can edit the website 🙌
      13)data-* attribute : U can add this attribute to store some custom data which can then be accessed using "dataset" property in JS

            //In .html
            <div class="box" data-manga="OnePunchMan">I am Box</div>

            //In JS
            document.querySelector(".box").dataset
                  output : DOMStringMap {manga: 'OnePunchMan'}
            

      Inserting Elements in DOM
      Using JS To change the DOM is useful if you wish to change the webpage without reloading for the user 🌈🌈
      
      All the below 👇 methods take a node object (the new node to be inserted) as input.
      1).append(<a node object here>) : new element will be inserted at the end of jis bhi element me append kr rhe ho
      2).prepend()
      3).after()
      4).before()
      5).replaceWith()

           
      6).insertAdjacentHTML("<position>","<HTML Text>")
            eg: .insertAdjacentHTML("afterbegin","<div>Inserted in beginning</div>")
            1)This methods takes a HTML text as input (& NOT a Node object)
                  This would work : insertAdjacentHTML("afterbegin","<div>Inserted in beginning</div>") ✅
                  This won't work : insertAdjacentHTML("afterbegin", <a Node object> ); ❌
                  (See SupportedParams.jpg)
      7).insertAdjacentElement("<position>", <node object>)
      8).insertAdjacentText("<position>", "<Text>");
      9).remove()

      Other Things
      1).classList
            1).classList.add("<new-class-to-be-added>")
            2).classList.remove("<class-to-be-removed-from-classList>")
            3).classList.toggle("class-name") : if class in classList then removes it, if not then adds it
      2).className

/**********Tut 73***********/
      Exercise : Card Gen via JS

/**********Tut 74***********/
      JS Events
      1)Add event listeners to any element that can fire the events using "addEventListener()"
            element.addEventListener("click", () => {
                  alert("I was Clicked");
            });

            1)The Second function in "addEventListener()" can take an event-object ("e" in below ex.) as argument. An event-object represents an event that takes place in the DOM
                  element.addEventListener("keypress", (e) => {
                        console.log(e); //Logging the event object
                        console.log(e.key);
                  });
            
            2)Events can also be handled via HTML attribute (like "onload" etc...) but above method is preferred more. 🌄

      2)Event Bubbling : an event will bubble up to the parent elements.
            1)e.stopPropagation() : to stop the event propagation (e is an event object)

      Other Functions (Unrelated to Events)
      1)setInterval(<a function>, <Time in ms>) : If you want to run some code repeatedly after some time interval
      2)clearInterval() : to stop setInterval(...)

      3)setTimeout(<a function>, <Time in ms>) : If you want to run some code ONCE after some time interval
      4)clearTimeout() : to stop setTimeout(...)

/**********Tut 75 + Tut76***********/
      [Majorly Done From LB WebDev local saved Video for this topic : "82. JS DOM Class - 1.mp4" ]

      🟨🟨JS callbacks and promises🟨🟨

      1)Asynchronous programming is implemented in JS (say for functions that may take a long time to return their output)
            (Ref: https://developer.mozilla.org/en-US/docs/Learn/JavaScript/Asynchronous/Introducing)
      2)callback functions : callback functions are passed as arguments to other functions and then executed inside this outer function to perform some action.
            Tip : 1)callback functions are used to implement Asynchronous programming (like executing a callback once a time taking Asynchronous task completes)
                  2)Poor use of callbacks can lead to "JS Pyramid of Doom" 💩 (see : https://matcha.fyi/pyramid-of-doom-javascript/)
      3)promise : used to prevent "JS Pyramid of Doom" 🛡️. Let's see in more detail
            1)What is a Promise? 
                 A)It is used to execute some code parallely in background in JS.
                  The promise then tells if that code was executed successfully or not.
                       (i) promise resolved : if that code was executed successfully
                       (ii)promise rejected : if that code was NOT executed successfully (i.e some error occurred)
                 B)This code (inside the promise) can be a synchronus code OR asynchronous code 
                 c)Basically promise is a task that i wish to get completed parallely in background.
                   🌳Practical use case:
                        Say u are running a synchronus code & in b/w you made a network call. Ab is network call se dhere-dhere 🐌 data aega. So i wouldn't want to freeze the entire webpage (and frustrate 😡 the user) while this is happenning. So i will handle the network call asynchronously & parallely in background using a promise. The promise will tell me if the network call was successfull or not in the end (i.e data aa paya ya kuch gdbd ho gyi). 

                        Note: 1) See "Event Loop" in JS from LB WebDev local saved Video "80. JS DOM Class - 1".
                              2) Note that LB only explains the traditional Event Loop i.e with only 1 queue (now called the Macrotask Queue). With ES6 and the introduction of promises, we have another queue: Microtask Queue.
                              3) So, the Event Loop now has 4 components:
                                    (i) Single Call Stack (Bcz JS is Single threaded so there is only 1 call Stack)
                                    (ii) The Browser (i.e WEB APIs)
                                    (iii) Macrotask Queue: for event-handlers and WEB API callbacks (like setTimeout's callback: after the times expires, this callback goes into the Macrotask Queue)
                                    (iv) Microtask Queue: for callbacks of .then(), .catch() and .finally() (+ other things)

                                    💙 Great Video that covers this "new" Event Loop: https://youtu.be/eiC58R16hb8?si=zovgIjFCS8Wwi6NO 

            2)Syntax of a making a promise (basically we will make a promise object using a call to constructor of its class):

                        let meraPromise = new Promise(function(resolve, reject){
                              //Any code to be run parallely
                        });

                        Ex:
                        //Synchronus code inside promise (To be run parallely)
                        let meraPromise1 = new Promise(function(resolve, reject){
                              console.log('I am inside Promise1');
                        });

                        Here, "meraPromise1" is a promise object. 😊😊
            
            3)A promise object has following properties:
                  1)state : pending, fullfilled OR rejected
                  2)result : 
                        (i)promise resolved : result is a value
                              -use "then()" method of promise object to work with value
                        (ii)promise rejected : result is an error
                              -use "catch()" / "then()" method of promise object to work with error

                              Tip: If your promise returns an error, u need to chain the then() & catch() methods, using them separately won't work bcz then() does not catch errors, so JS engine returns error ('ERR_UNHANDLED_REJECTION')

                                    ❌❌WRONG❌❌
                                    let p = new Promise(function(resolve, reject){
                                          reject("p rejected");
                                    })

                                    p.then((val)=>{
                                          console.log(val);
                                    })

                                    p.catch((err)=>{
                                          console.log(err);
                                    })

                                    ✅✅Correct✅✅
                                    let p = new Promise(function(resolve, reject){
                                          reject("p rejected");
                                    })

                                    p.then((val)=>{
                                          console.log(val);
                                    }).catch((err)=>{
                                          console.log(err);
                                    })


                  3)Promise chaining : Say we have promises P1, P2, P3
                        chain: P3's execution depends on successfull execution of P2 which itself depends on P1 i.e
                                    P3 --depends on--> P2 --depends on--> P1 
                        
                        Note: Here, aisa possible hai ki P1 browser me chla jaye and resolve ho jaye (but still P1 has NOT ❌ executed, it's in the browser) and therefore P2 ko execution start krne ka green signal 🟩 mil jaye. Same for P2 and P3

                  4)Promise API methods   
                        1)Promise.all()
                        2)Promise.allSettled()
                        2)Promise.race()
                         ...etc (Do from cwh Notes Chapter 9)



      🟨🟨Async - Await🟨🟨

      1)async- await is used when multiple promises depend on each other (same as P1, P2, P3 above but now say we have upto P50).
      2)Some points:
            (i)Any function can be made "async"
            (ii)async function returns a promise
            (iii)any function can be made "await"

      3)consider 3 promises P1, P2, P3. We want the following: 
            P3 --depends on--> P2 --depends on--> P1

            conditions:
            A)Jb tk P1 execute nhi ho jata, P2 start hi nhi hoga. Same for P2 and P3 (🔴 This condition was not there in "Promise chaining" eg. above)
            So, this is like a RELAY RACE 🏃‍♂️🏃‍♀️, jb tk pichla bnda flag nhi lata, agla bhag nhi skta!

            B)In such a situation, we can use async-await rather than multiple .then() (See "AsyncAwait.html" file)


      🟨🟨Fetch API🟨🟨

      1)API (Application Programming Interface) : an interface that facilitates the communication b/w different software components.
      2)fetch API is used to get / push something on the network.
      3)calls using fetch API:
            1)get call
                  Syntax: fetch("<some-url>"); 
                  Note that paid APIs might need more things in the get call (say Keys)
            2)Post call
                  Syntax: fetch("<some-url>", <an object containing additional things>);

                  Tip: Copy calls from "https://jsonplaceholder.typicode.com/guide/" 😁😁 

      🟨🟨Closures🟨🟨
      1)Say u have a nested function [eg: inner() inside of outer()], this nested function forms a closure.
      2)A closure is the combination of that nested function along with with REFERENCES to its surrounding state (its lexical environment).
        So, if inner() is now passed out from outer(), it will still work even though outer() has ended bcz inner() has references to the variables it needs (from its closure)


/**********Tut 78***********/
      Exercise : Hacking Simulator

/**********Tut 79***********/
      Error handling in JS
      1)throw <error-to-be-thrown>
            1)You can throw an error object using any of the 6 builtin error constructors:
                  SyntaxError
                  EvalError
                  RangeError
                  ReferenceError
                  TypeError
                  URIError

                  eg: throw SyntaxError("<Ur-error-msg-here>")
            
            2)You can also throw a custom error by making a custom error object and throwing that
                  eg: throw new Error("jhkb")

                  Tip: "new" in JS is used to make an object

      2)try-catch-finally block
            1)try-block ka code run hota hai, agr try-block me error throw hua to execution transferred to catch-block 
            2)finally-block:
                  1)Chahe try-block error throw kre ya na kre, (i.e catch-block pe execution aye ya na aye), last me finally-block zrur execute hota hai
                  2)🟢finally-block is mainly needed when we are inside functions
                    🟢When inside a function, we would want that the function to either "return" from within the try-block or from within the catch-block 
                    🟢So if we want to do something even when the "return" statement has been encountered in the function, we use finally-block

/**********Tut 80***********/
      OOPs in JS
      1)OOPs JS will not be used in beginner level projects
      2)Prototype of an object : gives additional properties to that object 
      3)"extends" keyword : used for inheritance
      4)-"super()" used to call the base class constructor
        -"super" keyword to access base class methods
                  eg : super.eats(); //To call eats() of super (base) class
      5)getters & setters (Not done in enough detail)
            Note: 🔻Syntax of getters & setters WRONG in cwh Notes chapter 11
      6)instanceof operator : to check if an object is of a particular class 
            1)Syntax : <object> instanceof <class>
            2)Note that an object is also an instance of its class's BASE class, so "true" returned in that case!

/**********Tut 82***********/
      Advanced JS

      IIFE
      1)An IIFE (Immediately Invoked Function Expression) is a JavaScript function that runs as soon as it is defined
      
      Destructring
      2)The destructuring assignment syntax is a JavaScript expression that makes it possible to unpack values from arrays, or properties from objects, into distinct variables
            eg: 1)Wiht arrays
                  let [x, y, ...rest] = [1,2,3,4,5,6,7]; {Note that 3 dots "..." are necessary}
                
                2)With objects
                  let boy = {
                        Name: "Rohan",
                        Age: 18,
                        weight: 60,
                  }

                  let {Name, weight} = boy;   .....Line(1)

                  Note: It should be "Name" & "weight" only (& no other variable name) to destructure those properties out of the object

      Spread operator
      1)Spread operator khol deta hai (symbolised with 3 dots "...")

      Hoisting
      1)Only works for "var" & not "let" & "const". [So not useful unless u are using "var" which u anyways should not 🤪]
      2)Hoisting : when the interpreter appears to move declarations of "var" (& NOT the definitions/Initializations) on the top of the block, so they can be used before they are declared (although value remains "undefined" until you reach the line where they are declared + initialized/defined as only declaration is hoisted to the top, like a flag 🚩)

      3)Hoisting can also do with functions (Pehle use krlo then declare + define)
       (But 🔴NOT if function is made with let/const (like const foo = function (x){...})


/**********Tut 83***********/
      JS Practice Questions
      1)Local Storage:
            1)You can store/ retrieve string "key" "value" pairs in the browsers local storage for a specific webpage
                  -localStorage.setItem("<key>", "<value>); {To set a pair}
                  -localStorage.getItem("<value>"); {To retrieve a pair if it exists}
            
            2)U can also store objects to local storage by converting them to string (JSON.stringify(<object>))
            2)You can view the local storage for a webpage in the "Application" tab of Dev Tools in edge
      2)Smooth Scroll (DIY)

/**********Tut 84***********/
      Project : Spotify Clone

/*********Tut 85***********/
      Starting backend Development using JavaScript 🎉🎉
      1)Now we will not be using JS to write scripts for the frontend (i.e no JS inside "script" tags in html) but rather using it as a programming language for programming the logic at the backend 
      2)This backend logic is intended to be run on our remote server that would be listening for requests from the clients (i.e web browsers sending requests to the remote server)
      3)Things that we will need
            1)Node.js : JavaScript's runtime environment (to run JS outside a web browser)
                  1)command to run the JS file via Node.js
                        node <path-to-js-file>
                        eg: (i) node "c:\Users\Geetansh\Desktop\WebDevCodes\Tut85\server.js"
                            (ii) node .\Tut85\server.js 
                            (Also works; "." means current directory, so navigate to the appropriate directory in the cmd prompt, say using "cd" command)
            2)npm(node package manager) : What will it do ❓
                  1)It is used to manage packages. So the flow goes something like this : 
                        1)run "node init" (or "npm init -y" to skip all the questions. You can later enter required details yourself in "package.json")
                              1)This command initializes your package. Say you are writing backend logic for your Spotify Clone. So the entire logic will go into a package. Let's call this package "spotify-clone" 
                              2)This command will make a "package.json" file in your folder
                              3)Then if you use any other packages via "npm install <package-name>", say you use "slugify", while writing your code, this means your package "spotify-clone" depends on "slugify". So "slugify" will be added as a dependency in your "package.json" file.
                              4)In effect, a folder "node_modules" will be made which will contain the code of "slugify"
                              4)Now when you share your package "spotify-clone" with someone, say you push your "spotify-clone" on github, you won't push the folder "node_modules". You would just have the dependencies listed in "package.json". (npm automatically adds the dependencies in "package.json" when you install a package via "npm install <package-name>" cmnd)
                              5)When someone else pulls your code, he can run "npm install" and all the dependencies listed in "package.json" will be installed in "node_modules" and your code will work as expected for him.
                              
            3)Express.js
                  1)A JS framework for making server side application. 
                  2)We will use it to ease our backend JS writing process. 
      
      4)To be able to use functions from a package, we somehow need to import it in our JS file. (see "server.js" file)
            1)I used "const slugify = require("slugify");" {I have the "slugify" package in my "node_modules" folder}

            📒Note: This is the old way, i am using "commonJS modules" here. See Tut86 for latest standard.

/********* 85.5 ************/
      [Done From LB WebDev local saved Video for this topic : "135. BD - Class 1 [HD].mp4" ]
      
      Basics of BackEnd & the Client - Server model 

      🌍 HTTP protocol 🌍
      1)One of the ways a client can interact with the server is through the HTTP protocol. 
        It Defines several methods for the client to interact with the server for some resource, called HTTP request methods. Some of these are:
        1)GET : to get a resource from the server
        2)PUT : to update some existing resource (say data) on server
        3)POST : to submit some NEW data on the server (so pehle se server pe nhi tha, ab kuch nya store hoga vahan pe)
        4)DELETE : to delete some resource (say data) from the server

        📒Note : HTTP methods like GET, PUT and DELETE are idempotent, while POST is generally non-idempotent. 

/*********Tut 86***********/
      🟩CommonJs Vs EcmaScript Modules 

      1)"npm i --global nodemon" : installs the "nodemon" package globally (& not for just the current project/ folder)
            1)So "nodemon" will not be in the dependencies list of "package.json". 
            2)If you want that someone using your package should have "nodemon" then included it in the dependencies list.
            3)Why it's needed? Because every time you make a change in your server.js file, you will have to kill the server and restart the server manually. Nodemon, on the other hand, automates this process, so whenever you make a change to your server.js file, it will automatically restart the server.

      2)Modules in JavaScript
            1)A module is a function or group of similar functions. They are grouped together within a file and contain the code to execute a specific task when called into a larger application. You create modules to better organize and structure your codebase.
            2)So, A module is a single JavaScript file that has some reasonable functionality. (So modules are libraries) 
                  ex: Circle.js, 
                      Rectangle.js, 
                      Square.js

      3)What are packages then?
            1)A package is one or more modules (libraries) grouped (or packaged) together.
            2)So, A package is a directory with one or more modules inside of it and a "package.json" file which has metadata about the package.
                  ex: You can get the package "Shapes" and have access to the Circle, Rectangle, and Square modules.

      4)2 major module systems : 
            1)CommonJS modules {using statements like --> const http = require("http"); }
            2)ECMAScript modules / ES6 modules {using statements like --> import http from "http" }

            🔴Tip : 1)ES6 modules is the latest standard so we will be usng this now!

                  2)If you only have a standalone JavaScript file, you can use 1). However, if it's part of a package and includes a "package.json" file and if you want to use ES6 modules, use the statement { "type": "module", } inside that "package.json". Otherwise, the default is CommonJS modules. 

                  3)Additionally, if you specify { "type": "module", } in "package.json" , your code will produce an error if you attempt to use CommonJS modules (by using statements like --> const http = require("http"); )
      
      
      🟩Default V/S Named Exports (See folder "ExportsInESModules")
    
      1)2 Ways to export "things" out of a module. These "things" can be anything - variables, functions, objects!
            1)Named export
            2)Default export

      

      🟩Using Modules with HTML files (See folder "usingModulesWithHTMLFiles" inside folder "ExportsInESModules")

      1)In index.html, i used
       <script type="module" src="../server.js"></script> 
       to get "server.js" module in the HTML (import statements will only work if the JS file is treated as a module, so {type="module"} is necessary)

      📒Note : 1) "server.js" imports stuff from "myModule2.js" located inside "usingModulesWithHTMLFiles" folder.
                  So, even though i only got "server.js" in "index.html", the browser automatically gets the exported stuff from "myModule2.js"
               2)Also, the path inside "server.js" to "myModule2.js" is relative to "server.js" and still the console in Browser is able to locate "myModule2.js". This means that for import statements, if relative path is provided, the browser takes it relative to the module that is importing. 
               This is unlike when relative path is given in fetch() calls in JS, where the relative path is resolved taking the url of the HTML page as the base url (So there, it's relative to the HTML file that loaded the JS, rather than relative to whatever the actual location of that JS file might be) 

/*********Tut 87***********/
      Working with Files: fs and path modules

      🟩fs module
      1)To see all the details of the module includnig all it's functions, import the module & log it to console

            const fs = require("fs");
            console.log(fs);

      🟩Reading writing & Appending to files
      1)fs.writeFileSync() : writes to file Synchronusly 
            1)So, it stops current thread, content is written to file & then the current thread resumes execution
            2)Not Recommended, as JS supports Asynchronous Programming
      2)fs.writeFile(<file>, <content-to-be-written>, <a callback function>)
            1)It works Asynchronusly
            2)callback function is called once data is written to the file
            3)Recommended to be used! 😊
      3)fs.readFile(<file-to-be-read>, <a-callback-function>) : to read a file
      4)fs.appendFile : Appending to file

      Simple "fs" modules's functions above ☝ can lead to callback hell (Say you use "fs.writeFile" & inside the callback you use "fs.readFile" & inside it's callback you use "fs.writeFile" & so on..... 😫😫)

      So, "fs" provided a submodule where functions return promises. This is "fs/promises". It's functions are:
      1)fs.writeFile(<file>, <content-to-be-written>)
            1)It returns a promise!
      2)fs.readFile(), fs.appendFile() etc...

      🔴Tip : If you are inside a JS Module, you can use "await" keyword without being inside an "async" function. 😎 

      🟫path Module
      1)To deal with paths!
      2)Functions:
            -path.extname(<a string denoting the path>) : extension of file the path refers to 
            -path.dirname()
            -path.basename()
            -path.join()
                              etc...

/*********Tut 88***********/
      Introduction to Express.js
      1)Express.js is a JS framework to write backend / server side code
      2)Why use Express.js when Node.js ships with a built-in "http" module that can also start a server (See Tut86). Because Express.js has built-in many features that otherwise we would have to code from scratch.
            🔴Tip : run "npm i express@4" to specifically install 4th version of Express.js
      
      Basic Functions of Express.js
      1)app.get(<route>, <Handler call back function>) 
            1)This will listen for GET requests on "<route>" specified
            2)"<Handler Callback Function>" will execute if request comes in (and may send a response)
            3)Ex : 
                  app.get('/', (request, response) => {
                        response.send('Hello World!')
                  })

                  Here, forward slash ('/') represents the root URL of your application. When you visit your application's domain (e.g., http://localhost:3000/), you are accessing this root URL
      
      Similar synatax for other HTTP request methods:
       -app.post(): Listens for POST Requests
       -app.put(): Listen for PUT Requests
       -app.delete(): Listen for DELETE Requests 
                                                etc....
      
      2)Route parameters in URL: 
            1)eg: 
                  app.get('/blog/:slug', (request, response) => {
                        response.send(request.params.slug)
                  })
            
                        1) Here, "slug" is the Route parameters.  It'll take whatever value comes after "/blog/". All the route parameters are populated in the "request.params" object. For above code, "request.params" will look like:

                                    params: { slug: '<value>' }

                        This value can then be used to serve the response to the GET request
      
      3)Query Parameters in URL : used to send choti moti query / data to the server in the URL
            1)Query parameters me "?" ke baad wala saman in the URL
                  eg : http://localhost:3000/IronMan?mode=dark&region=India
            Here "mode = dark" and "region = India" are the Query parameters
            Say, "mode = dark" may signal the server to serve website in dark mode
      
      Serving static files in Express
      1)To serve static files such as images, CSS files, and JavaScript files. Static files are those files whose data remains the same and whose content is constant and does not change, like a CSS file, images, or videos etc...
            eg: app.use(express.static("public"));

            Now, static files from the "public" directory would be served by the server

            ⚠️Warning : Don't put your code files in "public" folder or they too will be accessible from the client side.

/*********Tut 89***********/
      Response, Request and Routers in Express

      🔴Tip : When you make an HTTP or HTTPS request to an API endpoint (a specific URL of a server), you are essentially interacting with an API. In this context, the term "API" refers to the interface provided by your server that defines how clients (such as web browsers or other applications) can interact with it. 

      🟩Handling POST requests
      1)If you want to send choti-moti Query to the server then you can use the query parameters in the URL. But say you want to send 
            (A)Some sensitive info for example e-mail and password during login. (Sensitive data MUST not be sent via Query Parameters) 
                  Or
            (B)Some large data such as entire content of a Stack Overflow question that you wrote
      In that case, you will use a POST request (GET request also has size limitations).

      2)A browser sends GET request by default. To send a POST request , I made "testPOSTReq.html" and within this file, i make the POST request using JS. But this is not an ideal way to test a POST req everytime, say you are designing API's you wouldn't want to write such JS everytime to test all the APIs you would make.
            So Better way? --> Postman
      
      3)Request chaining (Just a Syntax) : you can chain different requests like PUT, POST etc. for the same endpoint, say "/" of server's root URL

      4)response.sendFile() function : to send a file to the client when he makes a request on some url of our server
            1)Note that if you wish to use relative paths to the files you are serving, you must mention the root directory
            eg:         
                  res.sendFile("templates/index.html", { root: __dirname })

            Here, root is set to "__dirname". In Node.js "__dirname" is a global object that contains the name of the directory that the executing script resides from. In my case 

                  "__dirname" = C:\Users\Geetansh\Desktop\WebDevCodes\BackEnd\Tut89 {See server.js}

            🔴Tip : 1)It's standard practice to make a "templates" folder inside your project folder and place the files to be served there.
                     2)See other functions in "Response Methods.png"

      🟩Postman
      1)It's a software to test your APIs (i.e your server's response on various endpoints in current context)
      2)Why use it : you can test GET requests directly from browser but not other ones (POST, DELETE etc...). For them, use Postman (See point "2)" in "🟩Handling POST requests" )

      🟩Express Router
      Copy code from documentation : https://expressjs.com/en/guide/routing.html 😁😁

      1)You can use the "express.Router" class to manage routes in your server.
      2)Say you want to create routes for Geetansh (like /geetansh/about; /geetansh/contactme), for Soham, for 50 more people. Writing all the routes in the same server2.js file will make the code unmaintainable.
      3)So make a "routes" folder and maintain all the routes in separate files.

            See "Express Router" folder

/*********Tut 90***********/
      Middlewares in Express.js
      
      🟩What is middleware?
      1)What is a web-server : We see a web server as a function that takes in a "request object" and outputs a "response object". So there is this "request-response cycle" : 

            1)request ayi
            ⬇
            2)Beech me web application (i.e server)  
            ⬇
            3)response gya

      2)Middleware is anything that is placed in between the request-response cycle.

            1)request ayi
            ⬇
            3)Beech me middleware : so before the request can reach the actual server logic, it is intercepted by the middleware(s)
            ⬇
            2)web application (i.e server)  
            ⬇
            3)response gya

            See "middleware1.jpg"

            So, Middleware is a request handler that allows you to intercept and manipulate requests before they reach route handlers.
            (See "server.js" for example)
      
      3)So, Middlewares are functions that have takes 3 objects:
            1)request object (req), 
            2)response object (res),  
            3)the next middleware function in the application’s request-response cycle. 

            A Middleware can perform the following tasks:
            - Execute any code.
            - Make changes to the request and the response objects.
            - End the request-response cycle.
            - Call the next middleware function in the stack.
      
      ⚠️Warning : If the current middleware function does not end the request-response cycle, it must call next() to pass control to the next middleware function. Otherwise, the request will be left hanging (the browser will forever show the loading icon - see EXAMPLE 4 in "server.js" )

      Syntax to write your own middleware function: 
                        app.use(<your own middleware function)
      
      4)To write middleware specific to a route (when you are using the "express.Router" class), write that middleware insdie the file that is handling that route (see "server2.js" and "routes" folder)

      5)Order matters in middleware. Say you have :
            app.use((req, res, next) => {
                  req.name = "Geetansh Bhardwaj"; 
                  next()
            })

            app.use((req, res, next) => {
                  req.name = "Soahm Sharma"; 
                  next()
            })


            So finally "req.name" will hold "Soahm Sharma". (Just like how flow works in simple JS code, bcz this is JS after all 😊)
      
      6)5 Types of middlewares : 
            1. Application-level middleware : when we write our own (like in "server.js" )
            2. Router-level middleware : middleware specific to a route (see point 4) )
            3. Error-handling middleware
            4. Built-in middleware : builtin in NodeJS
            5. Third-party middleware

/*********Tut 91***********/
      Exercise : Clear the clutter

/*********Tut 92***********/
      🟩ejs Template Engine in Express
      ejs docs : https://ejs.co/
      Using ejs with express docs : https://github.com/mde/ejs/wiki/Using-EJS-with-Express

      1)EJS : Embedded JavaScript templating. It is a template / view engine
      2)What is a view engine used for : 
            1)template me variables ki value lake render krana webpage. 
            2)So view engine makes HTML from a "view" (i.e template). For ejs, views are saved with .ejs extension 
      3)Say you have a template for a webpage, like a blog post. You don't want to make a separate page for each blog post, but you want to use the same template to insert different data into it. This is where a template engine like EJS comes in handy. As a template engine, it allows you to take a single HTML file and insert dynamic data into it.
      4)How to use : 
            1)Set  up view engine using :  " app.set('view engine', 'ejs'); "
            2)Put all the templates inside "views" folder. The templates will be saved with  ".ejs" extension (rather than .html)
            3)Send templates to client using  :
                  res.render("<template-name>", <a JS object containing data to be filled in the template>);
      5)Partials in EJS : These are like reusable components. For example, you might want the same navbar across all your web pages, so you can separate the entire code for the navbar into a separate view (also called a "partial" i guess), say "navbar.ejs" and then include that in all other views using a simple line of code : 

                        <%- include('navbar'); %>           {This syntax as for ejs v3.0.1}

      See folder "ejsComponents"

/*********Tut 93***********/
[It's actually Tut94 but MongoDB me database ka naam tut93 rkh diya & use to change ni kr paya so...😂]
      Getting started with MongoDB & MongoDB Compass
      
      1)MongoDB is a NoSQL database. Data is ultimately stored in documents (in a format similar to JSON). Hierarchy of where data is stored in MongoDB:

            database -----> collections ------>  documents (these finally contain the data)

      Every Document has a default id.

      2)What is "playground-1.mongodb.js" in "Tut93" ? It is a script written in JS to insert data in MongoDB 😊

/*********Tut 95***********/
      CRUD operations in MongoDB

      1)For various operators in MongoDB ref : https://www.mongodb.com/docs/manual/reference/operator/

/*********Tut 96***********/
      Mongoose & Using it with Express

      Basic package (mongodb) : https://www.npmjs.com/package/mongodb
      Advanced package (mongoose) : https://mongoosejs.com/docs/index.html

      1)mongoose is a package that allows us to use MongoDB database in our Node.js application. You can also achieve this using a basic package called "mongodb" but mongoose is more advanced & useful.
      2)mongoose can :
            1)Enforce schema : by default MongoDB is a NoSQL database, but using Mongoose you can enforce a schema such that this document will contain these fields of these data types (say string or int etc...) only. These we define in the "models" folder (See "models" folder).
                  1)You can impose many checks while defining your schema. Example(from documentation):
                        const schema = new Schema({
                              name: String,
                              binary: Buffer,
                              living: Boolean,
                              updated: { type: Date, default: Date.now },
                              age: { type: Number, min: 18, max: 65 },
                              mixed: Schema.Types.Mixed,
                              _someId: Schema.Types.ObjectId,
                              decimal: Schema.Types.Decimal128,
                              array: [],
                              ofString: [String],
                              ofNumber: [Number],
                              ofDates: [Date],
                              ofBuffer: [Buffer],
                              ofBoolean: [Boolean],
                              ofMixed: [Schema.Types.Mixed],
                              ofObjectId: [Schema.Types.ObjectId],
                              ofArrays: [[]],
                              ofArrayOfNumbers: [[Number]],
                              nested: {
                              stuff: { type: String, lowercase: true, trim: true }
                              },
                              map: Map,
                              mapOfString: {
                              type: Map,
                              of: String
                              }
                        });
      
/*********Tut 96.1***********/
      Using MySQL with NodeJS
      Source: https://youtu.be/Hej48pi_lOc?si=AN6Vd1lelKj6D5HB (This is not cwh!)

/*********Tut 97***********/
      Dummy Data Generator

/*********Tut 98***********/
      Tailwind CSS in one Video
      Ref:  1)https://tailwindcss.com/
            2)https://play.tailwindcss.com/
            3)https://tailblocks.cc/
      1)TailwindCSS is a CSS framework
      2)@apply directives in Tailwindcss are useful to make utility classes together and apply them at once.
      3)Process to use : see "TailwindCSSsetup.md" (Also, everyting is there in the documentation)

/*********Tut 98.1***********/
      TailwindCSS more practice : done from LB saved Vid : " 59. Tailwind -  Class I [HD].mp4 "

/*********Tut 100***********/
      Exercise 17 - Design This Layout

/*********Tut 101***********/
      Project : X.com (Twitter) Clone using Tailwind CSS 
      
      Resume 37 : 05

/*********Tut 105***********/
      Introduction to React
      1)React : https://react.dev/
      2)Create React App : https://create-react-app.dev/

      0)"Create React App" is a build tool for making single page React apps. So basically apke development folder me sari files/ folders ready krke dega and you just start developing your React app. Ye kaam app manually bhi kr skte ho but that would be tiresome.

      1)With react you can:
            1)Use States : make variables in JS representing your elements in DOM. Change those variables and the elements in the DOM will change. 
            Without react, you would use "document.querySelector(...), BLA BLA" 🤣🤣
            2)Use Components : make a single component for "navbar" ONCE and use that across all your pages.
            1)Note : React component names must begin with capital letters.
                  So "import Navbar from './components/navbar';"  ✅works
                  but "import navbar from './components/navbar';" ❌Doesn't work
            3)Use  Props 
      2)To get started with a react app : "npx create-react-app with-react" (this will make a react app in "with-react" folder)
      3)You will write your code in "src/App.js" using JSX (Javascript XML). This will be placed in "public/index.html"'s "<div id="root">" element.
            1)JSX looks like HTML but gets converted to Javascript (so it's just syntactical  sugar). 
            2)Bcz "class" is a reserved keyword in Javascript, we use "className"  in JSX.

/*********Tut 106***********/
      Introduction to React
      0)Vite : https://vitejs.dev/guide/

      1)Vite : also a build tool. Better & more modern alternative to  "Create React App"

      2)React : it is a library  (primarily for frontend) & not a FrameWork (Next.js is a framework)
            1)Library v/s Framework : 
                  1)Library : performs specific, well-defined operations.
                  2)FrameWork : it provides a general skeleton (bones). You fill that skeleton with "meat" to make an application. Different "meat" filling results in different applications achieveing different things. 
      2)Everything in react is a Component. These Components are JavaScript Functions that return markup (i.e JSX). 
            Ex:
                  function App() {
                        return (
                              <>
                                    {/* write JSX Here */}
                              </>
                        )
                  }

      🔴Tip : 1)Components that are JS classes are also there but for now we will only use Components that are JS Functions
               2)To understand JSX : think of it like HTML in which you can write JS
               3)For a react app, the "/src/App.jsx" file is the entry point. So it will be served to the client on root url.
               4)"/src/index.css" file contains global css (i.e will be applied on all the pages even if not imported using JS "import" statement)

            1)The component can return atmost 1 tag (above example returns a wrapper tag <>). Entire JSX that you write should be contained within that 1 tag (this 1 tag can be any tag like <div>, <>, etc...)

/*********Tut 107***********/
      Hooks & State in React

      1)One of the features of React is that the app doesn't reload the entire page when navigating. This is made possible by React's virtual DOM, which acts as an intermediary between the React components and the actual DOM.
            Ex: Take YouTube, for instance. Suppose you're on a playlist section and then click on the YouTube icon to return to the homepage. Despite this transition, observe that the page doesn't undergo a reload. You can verify this by checking your browser tab, where you'll notice the absence of a page reload indicator.
      2)React Hooks : Hooks allow function components to have access to state and other React features. So, Hooks allow us to "hook" into React features such as state etc.. inside the Function Components of react.
            Ex:
                  function App() {
                        const [count, setCount] = useState(0)

                        return (
                        <>
                              <div>count is {count} </div>
                              <button onClick={() => {setCount(count + 1)}}>Update Count</button>
                        </>
                        )
                  }

            1)Here, App() is the Function component and useState() is the react Hook
            2)usestate() allows me to access the "state" functionality of react inside App(). Basically "count" is a state and setcount() is a function that updates that state and whenever the state is updated, the result is reflected in the DOM (on the webpage)
      3)You will write your code in "/src/App.jsx" and whatever the App() function returns will be placed in the "index.html" 's <div id="root"></div> element and this "index.html" will be served to the client.

/*********Tut 108***********/
      The useEffect Hook in React

      🔴Tip : 
      1)Use "." as project name and vite sari files current folder me faila dega instead of making a separate subfolder.
            npm create vite@latest       
            √ Project name: ... .         {supplied "."}
            
      2)My code in App.jsx is giving error "'React' refers to a UMD global, but the current file is a module. Consider adding an import instead." but ignore it, the file still works. The error can be resolved by using "import React from 'react' " but in the latest versions this import statement is not needed, So the error is outdated tbh 🤣🤣


      1)useEffect() Hook Batata hai Ki current component Ke browser may mount (i.e when the component loads into browser) hone par kya karna hai.
            Ex : 
                  function App() {
                        const [count, setCount] = useState(0);

                        useEffect(() => {
                              alert("I am from useEffect()")
                        }, [])
                        

                        return (
                              <>
                                    <div>count is {count} </div>
                                    <button onClick={() => {setCount(count + 1)}}>Update Count</button>
                              </>
                        )
                  }

            1)Here, the array in useEffect() ("[]" above) will contain the things (say, states) jinke change hone pr useEffect() chlega. Above the array is empty so useEffect() bs 1 bar chlega when the component App() renders (i.e loads in browser) for the 1st time. (After 1st time if App() is rendered again then this useEffect() nhi chlega)
                  🔴Tip : 
                  1)If in your "main.jsx", you have strict mode ON (i.e "<React.StrictMode> ... </React.StrictMode>) then your code will run 2 times during development. So useEffect() will run 2 times. So comment out that tag to see what is actually happenning.
                  2)strict mode development me (not during production : so it does not affect the production build in any way whatsoever) apke code ko 2 baar chalaega, keep it ON usually !
            
            2)Different cases of useEffect() (See App.jsx for implementation) : 
                  //Case 1 : Runs only on 1st render of the component (i.e App() here)
                  useEffect(() => {
                        alert("1st time App() render hua hai! 🥇")
                  }, [])

                  //Case 2 : Runs on every Render
                  useEffect(() => {
                        alert("App() render hua hai !")
                  })

                  //Case 3 : Runs on change of something (like a state). This will fire when state "count" is changed
                  useEffect(() => {
                        alert("count change hua hai")
                  }, [count])
            
            3)useEffect()'s cleanup Function : it runs when the Component unmounts (i.e removed from DOM) (See "/components/Navbar.jsx")
                      //Example of cleanup function
                        useEffect(() => {
        
                              return ( 
                                    // Below is the cleanup function (in the form of an arrow function)
                                    () => {
                                    alert("Navbar unmounted (removed) from DOM")
                                    }
                              )

                        }, [])

                  1)The clean up function is present inside the "return" statement 
                  2)To see the cleanup function in action : Once the page loads with the Navbar , manually comment out the Navbar in "App.jsx" and again go the page. You'll observe the cleanup function functioning as expected. In future, we will un-mount components conditionally in the code rather than doing it manually.
                  2)A possible use case of a cleanup function : Say we want to break connection from the server or update something in the database when a particular component is unmounted.

/*********Tut 109***********/
      The useRef() Hook in React

      1)(from documentation) useRef is a React Hook that lets you reference a value that’s not needed for rendering.
      2)2 Use Cases of useRef() hook (see "App.jsx" for implementation):
            1)Use 1 of "useRef()" : persisting the value of "a" b/w renderings
                  1)Note that useRef() se referenced value should not be used to display anything in the DOM bcz jb ye value update hogi to component re-render nhi kiya jaega (use "state" for that)
            2)Use 2 of "useRef()" : reference DOM elements & modify them w/o doing any actual DOM manipulation the old way (like we did in pure JS : document.getElementById("...") etc...)

/*********Tut 110***********/
      Conditional Rendering & Rendering Lists in React 

      🟩Conditional Rendering
      1)Say you want to render a particular element in the DOM based on some condition (See "App_CondRend.jsx", change it's name to "App.jsx" to run)

      🟩Rendering Lists in React 
      1)We will use JS map() function. See "App.jsx"
            - Note that jb aise map() se list render krate hai to you will need to provide a "key" for each list item.
            - Keys allow React to keep track of elements. This way, if an item is updated or removed, only that item will be re-rendered instead of the entire list. Keys need to be unique to each sibling. But they can be duplicated globally.

/*********Tut 111***********/
      Exercise : Display the Cards

      Problems Faced : 1)Was unable to identify what was coming in the response from the API yet got things working.

/*********Tut 112***********/
      Handling Events in React

      1)Baki HTML elements me event handling is simple, Bss <input> me thoda alg hai:
            1)Here, <input> ki "value" (i.e iska "value" attribute) ek react "state" variable hoga and usee update krenge when the user tries to change the "value"

      2)Making Forms in react : to handle many <input>s of a Form with a single event handling function :
            1)To control the values of more than one <input> field, we add a "name" attribute to each <input> & then we use a special easy to use syntax:
            
                  setform({...form, [e.target.name] : e.target.value})

/*********Tut 114***********/
      Project : TodoList App using React, Tailwind & React Icons

      🟩Things Learnt during project
      1)What is a react "state" actually ? [From docs : https://react.dev/learn/thinking-in-react#step-3-find-the-minimal-but-complete-representation-of-ui-state]
            1)Think of state as the minimal set of changing data that your component needs to remember.
            To Identify what should be a "state":
                  -Does it remain unchanged over time? If so, it isn’t state.
                  -Is it passed in from a parent via props? If so, it isn’t state.
                  -Can you compute it based on existing state or props in your component? If so, it definitely isn’t state!
            What’s left is probably state.

            2)FLOW : React "state" persists between re-renders of the component, and you explicitly change the state using the "setstate()" function. Chnage in the "state" causes the component to re-render.
            3)Pitfall 💀⚡ : Do not copy a prop into a "state". This violates "single source of truth" policy and leads to bugs
                  1)If a compnent receives a "prop" from it's parent and you can directly use that "prop" inside the child component, do that instead of storing the "prop" in a local "state" and then using that local "state" because "state" will persist during re-renders of that component and you will have mysterious bugs 🐛🐜
                  2)This is a classic case of copying props into local state -- which you usually do not want to do as it introduces a surface area for bugs, including the one you are seeing. If something is available as a prop -- what is the purpose of copying it into local state?
      
      2)Concept of IIFE (Immediately Invoked Function Expression)
            Say i am writing JSX and I have a button jisme "disabled" attribute hai. If i write "disabled = true" then the button will be disabled. Basically "disabled" expects a boolean. Say i don't want to directly supply a boolean but use a function that returns a boolean (In actual use case the function will return "true" or "false" based on some condition!). Ways to do this:
                  🟧Method 1 : define a JS function like usual.
                              
                        function disableBtn() {
                              return true;
                        }

                        <button
                              disabled={disableBtn()} 
                        >
                        
                  But this is stupid, bss ek hi jgh use krna hai to why make a function, function is code jo aap repeatedly use kro.
                        
                  💀Pitfall : If you use just the name of the function without "()" then you are not assigning the result of the function but the fucntion itself (basically a reference to the function) to "disabled". But "disabled" wants the result of the function, so execute the function (i.e call it i.e use "()") and give "disabled" the boolean result returned by the function. 
                  The following is ❌❌WRONG❌❌ : 
                        function disableBtn() {
                              return true;
                        }

                        <button
                              disabled={disableBtn} 
                        >

                  🟧Method 2 : Use IIFE. It's the best here ⭐
                        disabled={  (function disableBtn() {
                              if (value == "") {
                              return true;
                              } else {
                              return false;
                              }
                        })()}

                  Synatx of IIFE:
                  1)With Simple Functions : 
                        (function () {
                              // …
                        })();
                  
                  2)With Arrow Functions :
                        (() => {
                              // …
                        })();

/*********Tut 115***********/
      React Router: Routing in React

      🟩 Without React Router (See folder "WithoutRR")
      🔴Quick Note about how links are working : 
            Vite's server is working in such a way that the outer folder is the root of the server, which in this case is the folder "WithoutRR". The "index.html" file inside this root folder is served at the root of the server. Now, all the code that I write in "App.jsx" or all the components that I'm loading inside "App.jsx" are eventually added after being converted into pure HTML in the "index.html" file's " <div id="root"></div> ", and then served to the browser.

            So, all the links that you are writing in, say, your "Navbar" component, should be written with the "index.html" file in your mind. For example, I have an "<a>" tag with the relative path "./login.html" and I also have a "login.html" file in the root folder. So, clicking on that hyperlink, the server takes me to "login.html".
      1)The problem is that whenever I click on a hyperlink, the entire page reloads. React Router eliminates this problem by ensuring that when a link is clicked, only the relevant parts of the DOM are updated, rather than reloading the entire page. This allows for a smoother, faster user experience without full page refreshes.

      🟩 With React Router (See folder "WithRR")
      Ref: https://reactrouter.com/en/main/start/tutorial
      1)Baki zyada kuchn ni likh ra mai 😅

/*********Tut 115.0***********/
      React Router (Done From LB WebDev local saved Video : "122. React Intermediate - Class 2 [HD] - @babbar_dsa.mp4"; React Router starts from 48:46)
      
      1)How "NavLink" works : Jo bhi current Route hai uspe NavLink "active" naam ki CSS class lga dega. Now you can style this "active" class (See "\Tut115.0\src\App.css"), say like this:
            .active{
                  border: 2px solid red;
            }

            Now selected route will have a red border ⭕!

      2)Nested Routing: Say you have routes as follows:
            1)Home: "/"
            2)About: "/about"
            3)Login: "/login"

            - Because About comes after Home (You can see by the way they are written -> "/about" , 1st Home comes then About) so Home can be considered the parent route and About it's child route.
            - Therefore, Home is the parent route of both About, Login. 

            Resume from: "1:23:14" in the Lecture (Will come back to complete if need be in future 😉)

/*********Tut 116***********/
      The useContext hook in React

      1)Why we need this hook:
            App.jsx (owner of `count` state)
            |-- Navbar.jsx
            |   |-- Button.jsx
            |       |-- Component1.jsx

            Say you have many nested components as follows. `App.jsx`, `Navbar.jsx`, `Button.jsx`, `Component1.jsx`. 
            Now you want to access the `count` state in `Component1.jsx`. So you would have to pass it as props through all the components. 
            First of all into `Navbar.jsx`, then `Button.jsx`, then finally `Component1.jsx`. 

            So just so you can use the state in the lowest component, `Component1.jsx`, you had to pass it into all other higher components. 
            But this was unnecessary. This is known as props drilling, and this is the problem that is solved by the use of the `useContext` hook in React.

      2)To use "useContext" hook, make a context "CountContext" in "Context.js". Import this in "App.jsx". Now wrap the child components of "App.jsx" in the "Context Provider". This will look like:
            <>
                  <CountContext.Provider value={{ "count": count, "setCount": setCount }}>
                        <Navbar />
                        <button onClick={() => setCount((count) => count + 1)}>
                              count is {count}  
                        </button>
                  </CountContext.Provider>
            </>
      
      "value" would be accessible to all the child Components (and any further children of the child components) using "useContext" hook. Here i have passed a JS object in "value". So i can access this object and then use it's properties in any child component [See "Component1.jsx"]

/*********Tut 117***********/
      The useMemo hook in React

      1)It is used for memoization. 
            Ex ( See "App.jsx" ) : 
            whenever state "count" would change as the user clicks on the button, the entire Component "App()" would re-render as a result of which the Expensive Calculation would be done on every re-render. 
            
            We can avoid this by memoizing the result of the calculation using "useMemo" as :

                  let expensiveCalcResult = useMemo(() => (<Expensive Calculation Here>), [])

            Now, the Calculation would be done once and not every time "App()" re-renders!
            Here, [] would contain those "dependencies" jinke change hone pe the Expensive Calculation would be redone. For ex:

                  const [stateX, setstateX] = useState(0);
                  let expensiveCalcResult = useMemo(() => (<Expensive Calculation Here>), [stateX])

            Now, whenever "stateX" would change, the Expensive Calculation would be redone. 

/*********Tut 118***********/
      The useCallback hook in React

      1)React "memo" : Using "memo" will cause React to skip rendering a component if its props have not changed. This can improve performance. 
      Say you have a child component "Navbar()" in "App()", whenever "App()" re-renders, it's not needed to re-render "Navbar()" everytime. So, in "Navabr.jsx", you can:
            export default memo(Navbar);

            Ex : See "Navbar.jsx" 

      2)useCallback Hook: it is a React Hook that lets you cache a function definition between re-renders. The useCallback and useMemo Hooks are similar. The main difference is that useMemo returns a memoized value and useCallback returns a memoized function.
            Ex : See "App.jsx" 

/*********Tut 119***********/
      Handling Forms + Connecting React to Express Backend
      
      🟩 Handling Forms
      Ref: https://react-hook-form.com/
      1)Usually, if you are making forms in React, you need to create change handlers for all the input fields (See "Tut 112") and other stuff etc. This process can result in a lot of boilerplate code. However, the "react-hook-form" library does much of this for you and makes creating forms in React easy."
      2)See Comments in "App.jsx", everything is in the comments!

/*********Tut 120***********/
      Redux in One video
      Ref(Redux toolkit): https://redux-toolkit.js.org/

      1)Redux is an open-source JavaScript library for managing and centralizing application state. It is most commonly used with libraries such as React or Angular for building user interfaces. Redux Toolkit is used for writing redux code but in a more concise way. Redux Toolkit (RTK) solves problems that most of the developer’s face who used redux in a react application. RTK abstracts the basic redux code and provides us boilerplates that enable us to write redux code in less lines of code

      2)Why Redux? Basically, if you remember, state in React is owned by a component, and passing the state to other components via methods such as prop drilling can be a headache. This is where Redux comes in with the concept of a store. The Redux store holds all the states, and all components communicate with the store. This way, any state can be easily accessed by many different components.
      So in a nutshell: 
                  Centralization of states happens via the Redux store.

      3)Steps:
            🔴Tip : Copy most of the boilerplate code from documentation (" https://redux-toolkit.js.org/tutorials/quick-start ") 😁😁
            1)Make a "store.js" File (See "src\Redux\store.js). It will contain our states
            2)In "main.jsx", wrap the "App" component in "React-Redux <Provider>" as:
                  
                  import { store } from "./Redux/store.js";
                  import { Provider } from "react-redux";

                  ReactDOM.createRoot(document.getElementById("root")).render(
                        <React.StrictMode>
                              <Provider store={store}>
                                    <App />
                              </Provider>
                        </React.StrictMode>
                  );
            
            Now all the components in our React App (i.e inside "App") will have access to Redux Store!
            3)Now we will make a "Redux State Slice". This will basically contain a "state", it's initial value, functions to update it etc.
            4)Next we will add this "Slice" to our store. Now this Slice is accessible to all the components via the store.
            5)Now you can use the state from store in any component, say "App" . We will use the React-Redux hooks to let React components interact with the Redux store. These are:
                  i)"useSelector" : To read data from the store  
                  ii)"useDispatch" : dispatch actions to the store i.e update the value of the state 
            
      4)Some redux terms:
            i)Store - is what holds all the data your application uses.
            ii)Reducer - is what manipulates that data when it receives an action.
            iii)Action - is what tells reducer to manipulate the store data, it carries the name and (optionally) some data.

            Ex (See "App.jsx" ) : In below code, "increment" is the action:
            <button onClick={() => {
                              dispatch(increment())
                        }
                  } >+</button>

/*********Tut 120.0***********/
      Proper MERN Project 
      ref:"https://youtube.com/playlist?list=PLu0W_9lII9agx66oZnT6IyhcMIbUMNMdt&si=NI-PvWI3bN3QjAcQ"
      (from video 41 to 72)

      1)Now namings according to above playlist video Numbers, until "Tut 121" from where Sigma WebD Course continue with Next.js

      /*********Tut 120.41***********/
      Introduction to MERN stack

      /*********Tut 120.46***********/
      Adding Data Validation Using express-validator
      Ref(documentation) : https://express-validator.github.io/docs
      
      1)express-validator : It is an npm package to validate requests. 
      ex: you can validate a POST request. Say, you wish to validate "request.body" as: 
            1)"name" field should be minimum 1 in length
            2)"email" should be a valid e-mail format 
            etc...

            See "Tut120.0\NoteCloud-Backend\routes\auth.js" for usage.
      2)Do you need Express Validator even when you're using Mongoose?

      Answer: If the validation logic is simple and the Mongoose schema is sufficient, then you don't need Express Validator. But for complex validation schemas, you'd want a clean Mongoose model file and use Express Validator instead.

      Ex:
      Express Validator provides a .isEmail method that can verify if the given string is an email or not. However, Mongoose just validates if the given field is a string or not.

      /*********Tut 120.48***********/
      Understanding Password Hashing, Salt & Pepper
      
      1)bcrypt.js : npm package that automates password hashing, salting, and pepper for us.

      /*********Tut 120.49***********/
      Hashing Passwords using bcryptjs in NodeJs

      Using Tokens to authenticate users
      1) Once a user successfully logs in using their username and password, I will supply them with an authentication token. All subsequent requests to access secured resources will be authenticated using that token, so the user won't have to supply their username and password repeatedly. These tokens can be of multiple types, such as:
            1)JWT tokens,
            2)session tokens, etc. 
      
            We will be using JWT tokens.

      /*********Tut 120.50***********/
      Creating Login Endpoint & sending JWT auth token

      /*********Tut 120.55***********/
      React Project Setup

      1)Work on Backend completed till Tut 120.54 . From now onwards we are working on our FrontEnd. 🎉🎉
      2)concurrently (Ref: https://www.npmjs.com/package/concurrently): An npm package for starting multiple services together in the same terminal. 
            1)I will use it to start my React front end and Express back end in the same terminal. I could have started them in separate terminals, but then I would have to switch between terminals frequently.
            2)To use concurrently, I added this custom script in \NoteCloud-Frontend\package.json:
                  "both": "concurrently \"npm run dev\" \"nodemon ..\\NoteCloud-Backend\\server.js\""

                  Now, i can use "npm run both" to start both the FrontEnd & the BackEnd

      /*********Tut 120.58***********/
      useContext hook: Using React Context API
      (I already did it in "Tut 116" 😀)

      /*********Tut 120.59***********/
      useLocation Hook in React Router

      1)This hook returns the current location object. This object contains useful information about the current location (To understand: current URL) that you are on. Let's say I'm on route <root-route>/about. The location object might look like this:
            {
                  pathname: '/about',
                  search: '',
                  hash: '',
                  state: null,
                  key: 'default'
            }

      Here you can see that you have access to the current path inside the location object.
      (i)Use Case: If you want to do something based on the current location, you can use this location object.
      (ii) I used it to provide the same functionality as "NavLink" of React Router (see "Tut 115.0")

      /*********Tut 120.65***********/
      Adding "fetch notes" functionality to iNotebook 

      Things Learnt
      1)How to enable CORS requests in your backend: using a npm package "cors" (Ref: https://expressjs.com/en/resources/middleware/cors.html) 
      2)Enabling CORS (Cross-Origin Resource Sharing) on your back end means you are allowing your back end to respond to cross-origin requests.

      /*********Tut 120.69***********/
      Adding Login Component to iNotebook

      Things Learnt:
      1)Adding ".env" functionality to your vite (+react) project. Ref: " https://youtu.be/EQ3Htw6Z0PY?feature=shared "


/*********Tut 121***********/
      Introduction to Next.js & File based routing
      Ref(Next.js): https://nextjs.org
      
      1)What is Next.js : It is a React FrameWork to make big-applications using react
      2)Steps to start:
            1)run: npx create-next-app@latest
            2)Follow along:
                  √ What is your project named? ... firstnextprj
                  √ Would you like to use TypeScript? ... No / Yes
                  √ Would you like to use ESLint? ... No / Yes
                  √ Would you like to use Tailwind CSS? ... No / Yes
                  √ Would you like to use `src/` directory? ... No / Yes     
                  √ Would you like to use App Router? (recommended) ... No / 
                  Yes
                  √ Would you like to customize the default import alias (@/*)? ... No / Yes
                  Creating a new Next.js app in C:\Users\Geetansh\Desktop\WebDevCodes\BackEnd\Tut121\firstnextprj.
      3)Next.js can be used in two ways: app-based routing and page-based routing.
            1)App Router (We will do this 🙌):
            - This is the latest method introduced in Next.js.
            - Better suited for larger and more complex applications.

            2)Pages Router:
            - This is the traditional method used in Next.js.
            - Pages are created by adding files to the `pages` directory.
            - Each file in the `pages` directory automatically becomes a route.
            - Simple and straightforward, especially for small to medium-sized projects.
            - Provides automatic code splitting, server-side rendering, and static generation.
      4)Layout:
            1)".../app/page.js" contains the home page of the next app (i.e it will be visible on " <base-url-of-website>/ ").
            ".../app/globals.css" contains global css of your app.
            2)You can make custom routes, say " <base-url-of-website>/about " by making a folder ".../app/about" and making a file ".../app/about/page.js" in it.
            Now this "page.js" will be visible on " <base-url-of-website>/about ". This is App router in Next.js 
            3)To create a component, say "Navbar", make a new file "firstnextprj/components/Navbar.js". Then you can import it in other files (like see ".../app/page.js). 
            Also, you can import it in ".../app/layout.js". This "layout.js" defines the layout of all the pages in the app. Also, you can change the metadata and title of the app from here!

            🔴Tip : 
                  1)You will see "@" in import statements like "import Navbar from "@/components/Navbar". Here, "@" is an alias provided by Next.js. It points to the root of the project (here, it's the folder "firstnextprj"). 

                  2)So, when you import a component like this : 
                  "import Navbar from "@/components/Navbar", 
                  it is equivalent to importing it like this : 
                  "import Navbar from "firstnextprj/components/Navbar". 
                  This makes it easier to import components from anywhere in the project.

/*********Tut 122***********/
      Server & Client Components in Next.js

      1)Next.js is a full stack framework, you can write both client side and server side code in it. By dafault in Next.js, any component that is placed within the App Router is considered a Server Component.
            1)Server Component : Basically server side code. It runs on the server. HTML jo bnti hai vo bnke client pe bheji jati hai
                  1)Console logs here will be visible on server side
                  2)It's Default
                  3)see "app/page1.js" [change name to "page.js" to use it]
                  4)🟥Note : React hooks like "useState" etc will NOT ❌ work in a Server component. 
                        1)Why? Bcz React is a frontend JS library and iska code browser pe jake work krta hai. To React ki cheeze like "state", "hooks" vgera sirf client component me chlegi jo browser pe bheja jata hai!
                        2)From ChatGPT:
                              Server Components
                                    1)Execution Environment: Server components run on the server. They are rendered on the server-side and sent to the client as static HTML.
                                    2)Lifecycle: Since server components are rendered on the server, they don't have a lifecycle in the way client components do. This means there is no concept of "mounting" or "unmounting" as the component doesn't exist in the client's browser to be managed over time.
                              Client Components
                                    1)Execution Environment: Client components run in the browser. They can interact with the user and manage state over time.
                                    2)Lifecycle: Client components go through a lifecycle (mounting, updating, unmounting) that React manages. This lifecycle allows the use of hooks like useState for state management and useEffect for side effects.
                        3)If you feel the need to use React Hooks while writing a server component, separate out a new client component, use the React Hooks in that, and import that inside the server compnent 
                              Ex: I imported client component "Navbar.js" inside "app/page.js" 
                        


            2)Client Component : This code is sent to the client (i.e the browser).
                  1)Console logs here will be visible on client side (i.e in the browser)
                  2)write "use client" on top of file to make a Client Component
                  3)see "app/page2.js" [change name to "page.js" to use it]
          Warning :🟨⚠ Warning : Be careful while writing code in a client component bcz the entire code will be sent to the browser

      2)When to use which component?
            1)Server Component : when you want to write backend logic (DB connection, user authentication etc...)
            Ex:   1) See "app/page.js". Here, i am reading some data from "data.json".
                  2) This code is obviously server side. It won't even work and throw error if you write "use client" on top of it bcz this code is sent to the browser which will not have access to either "data.json" or "fs/promises" module for that matter.
            
/*********Tut 123***********/
      Script, Link & Image components in Next.js
      
      🟩Link Component (Solves the same problem as "Tut 115: React Router")
      1)Use "Link" instead of "a" tag to use client-side routing in Next.js (This means page does not reload on URL click)
      2)See "myprj\components\Navbar.js"

      🔴Tip : To have custom title and metadata for a route, write this in the component of that route (ex: see "myprj\app\about\page.js") :
            export const metadata = {
                  title: "...",
                  description: "...",
            };

      If you don't specify one to i guess "layout.js" me jo hai vo lg jata hai

      🟩Script Component 
      1)This is used to send JS to the client side. In simpe terms , us page pe koi JS execute krne ke liye
      2)Use : import Script from "next/script"
      3)For Ex (From "\myprj\app\about\page.js" ):

            const page = () => {
              return (
                <>
                  <div>I am Geetansh</div>

                  <Script>
                    {`
                    alert("Welcome to About Page");
                    console.log("I am on the browser console");
                    `}
                  </Script>
                </>
              );
            };

            1)Note that it's not the HTML <script> tag, it's <Script> with capital S. 
            2)Ye JS browser pe run hogi. Remember that we are writing JSX inside " return( ...JSX Here... ) ". Ye JSX HTML bnke client ko jati hai. Agr client ko koi JS bhejni hai along with the HTML then we use "Script Component" in Next.js
            3)Usually it is used to load a third-party script like this:
                  <Script src="https://example.com/script.js" />

            -This is when you want 3rd party JS say Google Ads or Google Analytics on your page. 
            -If you want a 3rd party JS like Google Analytics across the entire Next.js App (i.e on all webpages of your website) then place it in "myprj\app\layout.js"
      
      🟩Image Component 
      1)The <Image/> component is a better and enhanced version of the <img> tag. 
      2)It includes features for automatic image optimization as:
            1)Size Optimization: 
                  1)Automatically serve correctly sized images for each device, using modern image formats like WebP and AVIF.
                        -This implies for the images stored locally on your server. Jb client image request krega to Apka Next.js me likha hua server stored image as it is client ko nhi dega. Agr client ka device bda hai to bdi image dega agr chota hai to choti image dega.
                        -Thus optimized!

                        🔴Tip : 
                              1)If your image is stored locally, it must be located in the "/public" folder (i.e root directory me 1 "public" naam ke folder me. In my case it's : "Tut123/myprj/public/"), otherwise, you’ll get an error.
                              2)If you want to use the Image Component, following 3 properties are must to specify
                                    -src
                                    -width
                                    -height
                              Also, "width" , "height" only accept pixels as values, which must also be an integer without a unit.
                              Ex: width={100}

                  2)On-demand image resizing, even for images stored on remote servers
                        -Agr apke code me image kisi 3rd party remote jgh se bhi aa rhi hai to bhi jb client vo image mangega to apka Next.js me likha server uss image ko optimize krke client ko dega. 
            
            To see the Size Optimization in action, see "app/page.js" i.e the home page in browser. Check the Network tab from dev Tools to see the sizes of the loded images which otherwise look identical. (ScreenShot attached in "Tut123\ss.jpg")

                  🔴Tip : 
                        1)To perform a hard refresh on Edge, you can use the shortcut "Ctrl+Shift+R". This reloads the page ignoring cache. Use it while testing via the Network tab
                        2)You can also throttle your Network to "Slow 3G" in dev Tools, do it and see that normal <img> tag performs much poorly.
                        3)Also, zoom in on the images, you will see that <img> tag wali mst detailed hai, but <Image> wali blurred hai.
                        Kuch pane ke liye kuch khona bhi padta hai 😂😂
                  
            2)Visual Stability: Prevent layout shift automatically when images are loading.
            3)Faster Page Loads: Images are only loaded when they enter the viewport using native browser lazy loading, with optional blur-up placeholders.

/*********Tut 124***********/
      Creating APIs in Next.js
      Ref: https://nextjs.org/docs/app/api-reference/file-conventions/route#http-methods

      1)Next.js is not only a front-end framework but also a back-end framework. So, you can also write back-end code in it. For example, you can define API-routes (what will be served on which route of your website)
      2)Steps     
            1)We will make a POST request handler for "<base-url>/api/postEndpoint" route of our application. So we wish to define what to do if we receive a POST request on this route
            2)Make a folder "...\app\api\postEndpoint\" and make a "route.js" file inside it.
              A "route.js" is a special file. It allows you to create custom request handlers for a given route.
            3)Now write the request handling logic inside it!


/**********************Temporary break from CWH course*****************************/

/**********************MinIO Starts*****************************/
Refer the "BackEnd\MinIO" folder
PLaylist being followed: https://youtube.com/playlist?list=PLFOIsHSSYIK37B3VtACkNksUw8_puUuAC&si=gWm2AzcR02wBXdLz

⚠️Warning: MinIO tried to be greedy and has seriously crippled the software in the latest open-source version — they’ve removed almost all functionality from the web console. Now, they’re pushing users to migrate to their enterprise edition. Instead, I used an older version from their archive: minio.RELEASE.2025-01-20T14-49-07Z
      Note: Although the file name doesn't include .exe, it's actually a Windows executable.
      You can simply rename it to minio.exe, and it will work!

/*********Vid 1***********/
      0) What is MinIO: an open-source object storage server that is S3 compatible (Think of it as an open source alternative to AWS).
      1) What is an Object?
            An "Object" is a Binary Large OBject - or BLOB
                  -Examples of BLOBS: (i) Think of the contents of your local computer - Documents, Photos, Videos, Music
                                    (ii) Raw or Intermediate data from Al or Machine Learning pipelines
                                    (iii) Streaming and Time Series data from metrics, IOT devices, and sensors
                  -BLOBs can have any size, format, structure, or type
                  -BLOBs have rich metadata that provide additional context around the object
      2) Any BLOB can be stored in a MinIO bucket.
      3) What is a Bucket?
            Think of a Bucket like a Volume (Volume as in: a logical storage that can be mounted/ unmounted by an OS, like the C:/, D:/ in windows)
                  -Amazon (AWS) limits buckets to ~100/account, where each bucket has a globally unique DNS (used to access that bucket)
                  -MinIO does not have bucket limits
                  -Applications (Like your NodeJS backend) typically don't create volumes - they consume them. Object Storage administrators create the buckets for apps to use. Applications interact with buckets to PUT and GET objects.

/*********Vid 2***********/
      0) Meaning of basic terms [Src: ChatGPT]
            1) Node: A node is typically a server — physical or virtual — running MinIO.
                  Think: node = one machine running minio
            2) Drive: A drive is an individual storage device on that node.
                  HDD, SSD, mounted volume — doesn’t matter
                  One node can have multiple drives
            3) Availability: Can the system stay up and serve data if something fails?
            4) Redundancy: Does the system keep backup copies or fragments of data in case one copy is lost?
            5) Versioning: Can you store multiple versions of the same object (file)?
            6) Locking (Object Retention): Can you lock a file from being deleted or overwritten (for legal/backup rules)?
            7) Replication: Is data copied to other drives or nodes to prevent data loss?
            8) Expansion: Can you add new drives or nodes later to increase storage?

      1) MinIO Deployment Types
            1) Single Node Single Drive (One machine, one disk.)
                  Supports Versioning and Object Retention (Locking)
                  No availability or redundancy outside of what the disk provides
                  Losing the disk or node results in downtime or data loss
            
            2) Single Node Multi Drive (One machine, multiple disks (e.g., /mnt/d1, /mnt/d2, /mnt/d3))
                  Supports all MinIO Features (Versioning, Locking, Replication, Expansion)
                  Drive-level redundancy and availability only
                  Losing the node results in downtime or data loss

            3) Distributed: Multi Node Multi Drive (Many machines, each with one or more disks)
                  Supports all MinIO Features (Versioning, Locking, Replication, Expansion)
                  Node and Drive level redundancy
                  Can tolerate loss of up to half the nodes or drives in the deployment
                  
                  This is where things like "Load Balancers" come up.

/*********Vid 3: Running MinIO***********/
      1) I am Running MinIO Bare Metal (i.e not in any container, directly in your OS)
      2) By default, MinIO provides a root user that you can use to log in to the MinIO console. However, this root user should not be used by any application to access or insert data into buckets—that’s considered poor design. ❌

      ✅The recommended approach is:
      For every application that needs to access a bucket, you should create a dedicated user for that application.
      So, if you have three applications storing objects in three separate buckets, you should create three different users, one for each application, and use those users for access.

/*********Vid 4: Creating Buckets and Users***********/
      1) 3 Ways to talk to your MinIO server: MinIO SDK, MinIO Console, MinIO CLI

/*********Tut 1***********/
The playlist goes ahead with Python SDK, I will be using the JavaScript SDK instead.
Ref (documentation for JavaScript SDK): https://min.io/docs/minio/linux/developers/javascript/minio-javascript.html#javascript-quickstart-guide

      1) Storing and retrieving the BLOB from a bucket (see code in "putObject.js" and "getObject.js")

/**********************MinIO Ends*****************************/

/**********************C# .NET in 1 video*****************************/
Source: https://youtu.be/SuLiu5AK9Ps?si=ob-Uw0A3fvRwtyEO
See "BackEnd\C#_dotNet" folder for code

      1) C# can be used to make desktop apps, mobile apps and web apps (so basically everything). 
      2).NET is a developer platform created by Microsoft. It has:
            (i) CLR (Common Language Runtime) – the "runtime" where C# code runs (like JVM for Java).
                  - C# is platform-independent (just like Java) because it compiles to CIL (Common Intermediate Language), and this CIL can be executed on any platform that has a compatible .NET runtime (CLR or CoreCLR).
                  - Flow:
                        C# Code (.cs)
                        ↓ (C# Compiler - csc)
                        CIL (Common Intermediate Language, formerly MSIL)
                        ↓ (CLR or CoreCLR at runtime)
                        Machine Code 
           
            (ii) Base Class Library (BCL) – built-in libraries for everything from file handling to network calls.

/********************** Redis Starts *****************************/
      Ref(Video): https://youtu.be/Vx2zPMPvmug?si=_mTvRnHXtcbESg2g
      Redis Official Docs: https://redis.io/

      0) What is Redis: Open source, in memory data-store (can be used for multiple things like cache etc.)
      1) Why Redis:
            Consider this scenario: You have a website with frontend + server (backend) + database. A user visits the site. The frontend sends an API request to fetch details from the backend.  
                  The backend queries the database and gathers the data. Suppose the data is "computed" from various tables:  
                  - Profile info from one table  
                  - Some ID from another table  
                  - Friends list or connections from yet another table  
                  (Think of Instagram: profile picture, unread messages, friend requests, etc.)  
                  Basically, this is an expensive query.

            Now, the user receives this "computed data" on the frontend.  
            If the user refreshes the page, all that work happens again!

            Problems:
            i) Re-querying and recomputing data across multiple tables  
            ii) High response time (poor user experience on refresh)  
            iii) High cost (too many expensive reads from the database)

            Enter Redis 🔴:
                  You create a Redis server, which runs in RAM (so Redis is running in RAM).  
                  Initially, Redis has no data. On the first request by a user, the backend fetches data from the database and also stores this "computed" data in Redis (here, Redis is acting as a cache).  
                  On subsequent requests, there is no need to query the database again. The data can be directly read from Redis.

            What is Computed Data?  
                  Consider something that is a dependent attribute, like age (which can be derived from date of birth), or something else that is not directly stored but can be computed using queries.  
                  We can directly save this computed data in Redis because recomputation every time is expensive.

      2) Getting started with Redis:
            (i) It's a server in itself thar runs on port: 6379
            (ii) Redis Stack: Redis by default only has CLI (& that is all you need for production), but for local learning and testing, we will use Redis stack (Redis server + GUI) 

            Resume from: 00:14:27

/********************** Docker Starts *****************************/
      Ref: https://youtu.be/31k6AtW-b3Y?si=MwTqtrbIuQVnK9VM

      1) Problem: Consider this scenario 
            - Dev1 is using Windows with Node.js v16, MongoDB 5, and Redis 6.0 to build a Node.js app.  
            - After 2 years, Dev2 joins the team. Dev2 is using macOS and installs Node.js v17, MongoDB 7, and Redis 7.0. Dev2 clones the app from GitHub, but it does not work!  

            Solution 1: Dev2 downgrades everything to match Dev1’s setup. The project may run now.  
            But if Dev1 was using something Windows-specific, Dev2 is at a dead end now. 💀

            Another obstacle: when you would host this app on cloud (AWS, DigitalOcean), you would have to deal with these same issues there, and if there are multiple instances it will be hell 🔥

            🟨 Main problem that Docker addresses: Replicating environments is tough.
      
      2) Docker Terms:  
            (i) Container: A standalone environment that has its own configuration and specified versions of various apps, like Node.js v16, Redis 6.0, etc.  
            This container can be copied by anyone and run on their machines.  

            Example: I can run a container on Windows, and you can run the same container on macOS — it works the same.
            
            (ii) - Docker daemon: main docker process that spins up docker images and does the actual work (This is the actual docker app).
                 - Docker desktop: just a GUI to see all our docker images etc!

            (iii) Containers and Images: 
                  Analogy:  
                  A MacBook is a machine running an operating system (macOS).  
                  Similarly, containers are just machines and cannot do anything on their own — you have to run images on them.  

                  Also, just like two different machines might be running the same OS (for example, Windows 10), the data between them is separate and not shared at all.  
                  In the same way, all containers running even the same image in Docker are isolated from each other. 
      
      3) Docker Commands: 
            (i) docker run -it <image name like "ubuntu">  : to start a NEW container, here to run an ubuntu image in interactive mode. After running this command, the container will start and your terminal will be open inside that container.
            Output from terminal: 
            
                  geetansh@Geetanshs-MacBook-Pro gen-ai % whoami
                  geetansh
                  geetansh@Geetanshs-MacBook-Pro gen-ai % docker run -it ubuntu
                  Unable to find image 'ubuntu:latest' locally
                  latest: Pulling from library/ubuntu
                  cc43ec4c1381: Pull complete 
                  Digest: sha256:9cbed754112939e914291337b5e554b07ad7c392491dba6daf25eef1332a22e8
                  Status: Downloaded newer image for ubuntu:latest
                  root@762890737f41:/# ls
                  bin  boot  dev  etc  home  lib  media  mnt  opt  proc  root  run  sbin  srv  sys  tmp  usr  var
                  root@762890737f41:/#  

                  Note: (i) Here, "762890737f41" is the ID of this container. Use Ctrl+D to exit the running  ubuntu container.
                        (ii) For the first run, you don't have ubuntu image do docker will download it from "hub.docker.com" [It's where public containers are present and where people pull them from. This is also the place where we will publish our custom images and other devs working wiht us will pull them from here. We can also run these custom images on whatever cloud server we are using in production! - So. basically GitHub for images.]
            (ii) - docker container ls : show all running containers
                 - docker container ls -a : show all containers (even stopped ones)
                 - docker container ls -a : show all containers (even stopped ones) 
                 - docker images / docker image ls : show all images on your machine  
            (iii) docker start/ stop <container name> : start/ stop OLD (already existing) containers 
            (iv) - docker exec <container name> <command to run> : to run a command in the container, get the results and then the terminal gets back to the main machine (outside docker)
                 - docker exec -it <container name> bash : now a bash terminal is open and is connected inside the container, so you stay inside the container after runnign this command 
            (v) docker run -it -p <port>:<port> -e key=value -e key=value <image-name> : "-e" enables us to set environment variables as {key, value} pairs inside the docker container

      4) Port Mapping in Docker:  
            Suppose your Docker container is running Node.js at port 9000.  
            If you try to access it from your host machine at localhost:9000, you will not be able to reach it because it is inside the container.  
            To make it accessible, you have to expose the port outside the Docker container. To do that, Use this command:  
                  
                  docker run -it -p 9000:9000 <image name>  

            This exposes the container’s port 9000 on your machine’s port 9000. Format: <machine port>:<container port>
      5) Containerize your nodeJS app (See "./BackEnd/Docker"): so the flow goes like : make your project as usual, now add a "Dockerfile" (yup excalty this name no extension, see this file in "./BackEnd/Docker/Dockerfile"). after doing alt his run this to make your custom image: 

            docker build -t my-first-docker-image-of-nodejs . 

      Here, (i) the "." -> the build context. The build context = the folder you send to the Docker daemon when building. So, "." means “use the current directory as the context”
            (ii) "my-first-docker-image-of-nodejs" -> image name

            Now, you can run this image as follows (Again, See "./BackEnd/Docker" for the express server code):

                  geetansh@Geetanshs-MacBook-Pro gen-ai % docker run -it -p 9000:3000 my-first-docker-image-of-nodejs
                  Example app listening on port 3000

            If, you want to pass an environment variable PORT (we have this line in our code: "const port = process.env.PORT || 3000" ):

                  Run 'docker run --help' for more information
                  geetansh@Geetanshs-MacBook-Pro gen-ai % docker run -it -e PORT=4000 -p 9000:3000 my-first-docker-image-of-nodejs
                  Example app listening on port 4000

            📒 Layer Caching in Docker: 
                  nDocker uses caching, so the order of commands in the Dockerfile is very important.

                  Case 0:  
                        If you don’t make any changes in the code and just rebuild the image, it will be lightning fast because Docker has everything cached and it knows there were no changes.

                  Case 1 (Good):  
                        Since the lines referring to our code are placed after installing Node.js, when we change our code and rebuild the Docker image, Docker already has everything up to "RUN apt-get install -y nodejs" cached.  
                        This means that part executes very fast, and only the code-related lines are processed again.  

                        Example:

                        FROM ubuntu  
                        RUN apt-get update  
                        RUN apt-get install -y curl  
                        RUN curl -sL https://deb.nodesource.com/setup_18.x | bash -  
                        RUN apt-get upgrade -y  
                        RUN apt-get install -y nodejs  

                        COPY package.json package.json  
                        COPY package-lock.json package-lock.json  
                        COPY main.js main.js  

                        RUN npm install  
                        ENTRYPOINT [ "node", "main.js" ]  

                  Case 2 (Poor):  
                        If the code lines appear first, then whenever we change the code, those lines will be processed again, but also everything after them (like installing Node.js).  
                        As a result, rebuilding the image becomes slower (As NodeJS will be installed every time when we change our code in the image building process).  

                        Example:

                        FROM ubuntu  
                        COPY package.json package.json  
                        COPY package-lock.json package-lock.json  
                        COPY main.js main.js  

                        RUN apt-get update  
                        RUN apt-get install -y curl  
                        RUN curl -sL https://deb.nodesource.com/setup_18.x | bash -  
                        RUN apt-get upgrade -y  
                        RUN apt-get install -y nodejs  

                        RUN npm install  
                        ENTRYPOINT [ "node", "main.js" ]

      6) Docker Compose:  
            Sometimes a single container is not sufficient. For example, your project may need multiple containers such as Postgres, Node.js, and Redis.  
            Without Docker Compose, anyone wanting to use the project would have to ask which containers are required, then manually pull and run them one by one.  
            This is solved by Docker Compose. Here, you can specify multiple containers that need to be spun up, along with all their configurations (environment variables, ports, etc.).  

      Commands:  
            docker compose up  
                  Spins up all the containers defined in the docker-compose.yml file.  

            docker compose down  
                  Stops and removes all the containers, networks, and resources created by docker-compose up.  

            docker compose up -d  
                  Spins up all the containers in detached mode (runs them in the background).




